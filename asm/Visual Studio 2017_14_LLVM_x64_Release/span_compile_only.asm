	.text
	.intel_syntax noprefix
	.def	 "?foo@@YA_NXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?foo@@YA_NXZ"          # -- Begin function ?foo@@YA_NXZ
	.p2align	4, 0x90
"?foo@@YA_NXZ":                         # @"?foo@@YA_NXZ"
.Lfunc_begin0:
	.cv_func_id 0
	.cv_file	1 "C:\\projects\\gsl\\tests\\span_compile_only.cpp" "1C0463605BB78E16BF18F4880712E428" 1
	.cv_loc	0 1 42 0 is_stmt 0      # ..\tests\span_compile_only.cpp:42:0
.seh_proc "?foo@@YA_NXZ"
# %bb.0:
	sub	rsp, 152
	.seh_stackalloc 152
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 144], rax
.Ltmp0:
	.cv_loc	0 1 44 0                # ..\tests\span_compile_only.cpp:44:0
	mov	byte ptr [rsp + 95], 1
	.cv_loc	0 1 45 0                # ..\tests\span_compile_only.cpp:45:0
	lea	rcx, [rsp + 128]
.Ltmp1:
	#DEBUG_VALUE: s <- [$rcx+0]
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
.Ltmp2:
	.cv_loc	0 1 46 0                # ..\tests\span_compile_only.cpp:46:0
	test	byte ptr [rsp + 95], 1
	mov	dl, 1
	mov	qword ptr [rsp + 80], rax # 8-byte Spill
	mov	byte ptr [rsp + 79], dl # 1-byte Spill
	jne	.LBB0_4
# %bb.1:
	lea	rcx, [rsp + 128]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	xor	edx, edx
	mov	r8b, dl
	cmp	rax, 0
	mov	byte ptr [rsp + 78], r8b # 1-byte Spill
	jne	.LBB0_3
# %bb.2:
	lea	rcx, [rsp + 128]
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rsp + 78], dl # 1-byte Spill
.LBB0_3:
	mov	al, byte ptr [rsp + 78] # 1-byte Reload
	mov	byte ptr [rsp + 79], al # 1-byte Spill
.LBB0_4:
	mov	al, byte ptr [rsp + 79] # 1-byte Reload
	and	al, 1
	mov	byte ptr [rsp + 95], al
	.cv_loc	0 1 48 0                # ..\tests\span_compile_only.cpp:48:0
	lea	rcx, [rsp + 112]
.Ltmp3:
	#DEBUG_VALUE: cs <- [$rcx+0]
	call	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
.Ltmp4:
	.cv_loc	0 1 49 0                # ..\tests\span_compile_only.cpp:49:0
	test	byte ptr [rsp + 95], 1
	mov	dl, 1
	mov	qword ptr [rsp + 64], rax # 8-byte Spill
	mov	byte ptr [rsp + 63], dl # 1-byte Spill
	jne	.LBB0_8
# %bb.5:
	lea	rcx, [rsp + 112]
	call	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	xor	edx, edx
	mov	r8b, dl
	cmp	rax, 0
	mov	byte ptr [rsp + 62], r8b # 1-byte Spill
	jne	.LBB0_7
# %bb.6:
	lea	rcx, [rsp + 112]
	call	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rsp + 62], dl # 1-byte Spill
.LBB0_7:
	mov	al, byte ptr [rsp + 62] # 1-byte Reload
	mov	byte ptr [rsp + 63], al # 1-byte Spill
.LBB0_8:
	mov	al, byte ptr [rsp + 63] # 1-byte Reload
	and	al, 1
	mov	byte ptr [rsp + 95], al
	.cv_loc	0 1 51 0                # ..\tests\span_compile_only.cpp:51:0
	lea	rcx, [rsp + 96]
.Ltmp5:
	#DEBUG_VALUE: s2 <- [$rcx+0]
	call	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
.Ltmp6:
	.cv_loc	0 1 52 0                # ..\tests\span_compile_only.cpp:52:0
	test	byte ptr [rsp + 95], 1
	mov	dl, 1
	mov	qword ptr [rsp + 48], rax # 8-byte Spill
	mov	byte ptr [rsp + 47], dl # 1-byte Spill
	jne	.LBB0_12
# %bb.9:
	lea	rcx, [rsp + 96]
	call	"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	xor	edx, edx
	mov	r8b, dl
	cmp	rax, 0
	mov	byte ptr [rsp + 46], r8b # 1-byte Spill
	jne	.LBB0_11
# %bb.10:
	lea	rcx, [rsp + 96]
	call	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rsp + 46], dl # 1-byte Spill
.LBB0_11:
	mov	al, byte ptr [rsp + 46] # 1-byte Reload
	mov	byte ptr [rsp + 47], al # 1-byte Spill
.LBB0_12:
	mov	al, byte ptr [rsp + 47] # 1-byte Reload
	and	al, 1
	mov	byte ptr [rsp + 95], al
	.cv_loc	0 1 54 0                # ..\tests\span_compile_only.cpp:54:0
	mov	al, byte ptr [rsp + 95]
	and	al, 1
	movzx	eax, al
	mov	rcx, qword ptr [rsp + 144]
	xor	rcx, rsp
	mov	dword ptr [rsp + 40], eax # 4-byte Spill
	call	__security_check_cookie
	mov	eax, dword ptr [rsp + 40] # 4-byte Reload
	add	rsp, 152
	ret
.Ltmp7:
.Lfunc_end0:
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.globl	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # -- Begin function ??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ": # @"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
.Lfunc_begin1:
	.cv_func_id 1
	.cv_file	2 "C:\\projects\\gsl\\include\\gsl\\span" "3BAA3FB91BA159E545E305706709D4CE" 1
	.cv_loc	1 2 384 0               # ..\include\gsl/span:384:0
.seh_proc "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe 5, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
	lea	rax, [rbp - 24]
.Ltmp10:
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	mov	r8b, byte ptr [rbp - 24]
.Ltmp8:
	xor	edx, edx
                                        # kill: def $rdx killed $edx
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	call	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
.Ltmp9:
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	jmp	.LBB1_1
.LBB1_1:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	add	rsp, 80
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA"
.LBB1_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp11:
.Lfunc_end1:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.p2align	2
"$cppxdata$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ":
	.long	.Lfunc_begin1@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp8@IMGREL+1         # IP
	.long	0                       # ToState
	.long	.Ltmp9@IMGREL+1         # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
                                        # -- End function
	.def	 "?size@?$span@H$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@H$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@H$0?0@gsl@@QEBA_JXZ":     # @"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin2:
	.cv_func_id 2
	.cv_loc	2 2 498 0               # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@H$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp12:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp13:
.Lfunc_end2:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$span@H$0?0@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ":   # @"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
.Lfunc_begin3:
	.cv_func_id 3
	.cv_loc	3 2 515 0               # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp14:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	nop
	add	rsp, 40
	ret
.Ltmp15:
.Lfunc_end3:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.globl	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # -- Begin function ??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ": # @"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
.Lfunc_begin4:
	.cv_func_id 4
	.cv_loc	4 2 384 0               # ..\include\gsl/span:384:0
.seh_proc "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 80
	.seh_stackalloc 80
	lea	rbp, [rsp + 80]
	.seh_setframe 5, 80
	.seh_endprologue
	mov	qword ptr [rbp - 8], -2
	mov	qword ptr [rbp - 16], rcx
	mov	rcx, qword ptr [rbp - 16]
	lea	rax, [rbp - 24]
.Ltmp18:
	mov	qword ptr [rbp - 32], rcx # 8-byte Spill
	mov	rcx, rax
	call	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	mov	r8b, byte ptr [rbp - 24]
.Ltmp16:
	xor	edx, edx
                                        # kill: def $rdx killed $edx
	mov	rcx, qword ptr [rbp - 32] # 8-byte Reload
	mov	qword ptr [rbp - 40], rax # 8-byte Spill
	call	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
.Ltmp17:
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	jmp	.LBB4_1
.LBB4_1:
	mov	rax, qword ptr [rbp - 32] # 8-byte Reload
	add	rsp, 80
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ")@IMGREL
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.def	 "?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA":
.seh_proc "?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA"
.LBB4_2:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 80]
	.seh_endprologue
	mov	rax, qword ptr [rip + __imp___std_terminate]
	call	rax
	ud2
.Ltmp19:
.Lfunc_end4:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.p2align	2
"$cppxdata$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ":
	.long	429065506               # MagicNumber
	.long	1                       # MaxState
	.long	("$stateUnwindMap$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	3                       # IPMapEntries
	.long	("$ip2state$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ")@IMGREL # IPToStateXData
	.long	72                      # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ":
	.long	-1                      # ToState
	.long	"?dtor$2@?0???$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ@4HA"@IMGREL # Action
"$ip2state$??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ":
	.long	.Lfunc_begin4@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp16@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp17@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
                                        # -- End function
	.def	 "?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	.globl	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # -- Begin function ?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ": # @"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
.Lfunc_begin5:
	.cv_func_id 5
	.cv_loc	5 2 498 0               # ..\include\gsl/span:498:0
.seh_proc "?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp20:
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	nop
	add	rsp, 40
	ret
.Ltmp21:
.Lfunc_end5:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.globl	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # -- Begin function ?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ
	.p2align	4, 0x90
"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ": # @"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
.Lfunc_begin6:
	.cv_func_id 6
	.cv_loc	6 2 515 0               # ..\include\gsl/span:515:0
.seh_proc "?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp22:
	call	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	nop
	add	rsp, 40
	ret
.Ltmp23:
.Lfunc_end6:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.globl	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # -- Begin function ??0?$extent_type@$0A@@details@gsl@@QEAA@XZ
	.p2align	4, 0x90
"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ": # @"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
.Lfunc_begin7:
	.cv_func_id 7
	.cv_loc	7 2 311 0               # ..\include\gsl/span:311:0
.seh_proc "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rax, qword ptr [rsp]
.Ltmp24:
	pop	rcx
	ret
.Ltmp25:
.Lfunc_end7:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.globl	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z": # @"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
.Lfunc_begin8:
	.cv_func_id 8
	.cv_loc	8 2 597 0               # ..\include\gsl/span:597:0
.seh_proc "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 208
	.seh_stackalloc 208
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 72], -2
	mov	byte ptr [rbp + 56], r8b
	mov	qword ptr [rbp + 48], rdx
	mov	qword ptr [rbp + 40], rcx
	mov	rcx, qword ptr [rbp + 40]
	mov	qword ptr [rbp + 64], rcx
.Ltmp30:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp + 32]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	mov	rcx, qword ptr [rbp + 48]
	mov	r9, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp31:
	.cv_loc	8 2 598 0               # ..\include\gsl/span:598:0
	mov	rcx, r9
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp + 7], 0
	test	dl, 1
	jne	.LBB8_1
	jmp	.LBB8_2
.LBB8_1:
	test	byte ptr [rbp + 7], 1
	jne	.LBB8_4
	jmp	.LBB8_5
.LBB8_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 8]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 7], 1
.Ltmp26:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp27:
	jmp	.LBB8_3
.LBB8_3:
	ud2
.LBB8_4:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB8_5:
	.cv_loc	8 2 599 0               # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 48]
	mov	byte ptr [rbp - 25], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 65], cl # 1-byte Spill
	jne	.LBB8_7
# %bb.6:
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 65], dl # 1-byte Spill
.LBB8_7:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB8_8
	jmp	.LBB8_9
.LBB8_8:
	test	byte ptr [rbp - 25], 1
	jne	.LBB8_14
	jmp	.LBB8_15
.LBB8_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 25], 1
.Ltmp28:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp29:
	jmp	.LBB8_10
.LBB8_10:
	ud2
.LBB8_14:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp32:
.LBB8_15:
	.cv_loc	8 2 600 0               # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 64]
	add	rsp, 208
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB8_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp33:
	.cv_loc	8 2 598 0               # ..\include\gsl/span:598:0
	test	byte ptr [rbp + 7], 1
	jne	.LBB8_12
	jmp	.LBB8_13
.LBB8_12:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB8_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB8_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	8 2 599 0               # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 25], 1
	jne	.LBB8_17
	jmp	.LBB8_18
.LBB8_17:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB8_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp34:
.Lfunc_end8:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z")@IMGREL # IPToStateXData
	.long	200                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z":
	.long	.Lfunc_begin8@IMGREL    # IP
	.long	-1                      # ToState
	.long	.Ltmp26@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp27@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	.Ltmp28@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp29@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
                                        # -- End function
	.def	 "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.globl	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # -- Begin function ??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z
	.p2align	4, 0x90
"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z": # @"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
.Lfunc_begin9:
	.cv_func_id 9
	.cv_loc	9 2 334 0               # ..\include\gsl/span:334:0
.seh_proc "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	rax, qword ptr [rip + __security_cookie]
	xor	rax, rsp
	mov	qword ptr [rsp + 64], rax
	mov	byte ptr [rsp + 56], dl
	mov	qword ptr [rsp + 48], rcx
	mov	rax, qword ptr [rsp + 48]
.Ltmp35:
	lea	rcx, [rsp + 56]
	#DEBUG_VALUE: extent_type<0>:ext <- [$rcx+0]
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	call	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
.Ltmp36:
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rcx], rax
	mov	rax, qword ptr [rsp + 64]
	xor	rax, rsp
	mov	rcx, rax
	call	__security_check_cookie
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp37:
.Lfunc_end9:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
.Lfunc_begin10:
	.cv_func_id 10
	.cv_loc	10 2 338 0              # ..\include\gsl/span:338:0
.seh_proc "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp38:
	mov	rax, qword ptr [rcx]
	pop	rcx
	ret
.Ltmp39:
.Lfunc_end10:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.globl	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # -- Begin function ??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z
	.p2align	4, 0x90
"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z": # @"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Lfunc_begin11:
	.cv_func_id 11
	.cv_file	3 "C:\\projects\\gsl\\include\\gsl\\gsl_assert" "DC2D278DC08DD14FC7E736FCD7722B8E" 1
	.cv_loc	11 3 143 0              # ..\include\gsl/gsl_assert:143:0
.seh_proc "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	mov	qword ptr [rsp + 80], rcx
.Ltmp40:
	.cv_loc	11 3 144 0              # ..\include\gsl/gsl_assert:144:0
	mov	rcx, qword ptr [rsp + 80]
	call	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	lea	rcx, [rsp + 56]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rdx, rax
	call	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	lea	rdx, [rip + "_TI3?AUfail_fast@gsl@@"]
	mov	rcx, qword ptr [rip + __imp__CxxThrowException]
	mov	r8, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	r9, qword ptr [rsp + 40] # 8-byte Reload
	mov	qword ptr [rsp + 32], rax # 8-byte Spill
	call	r9
	ud2
.Ltmp41:
.Lfunc_end11:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@QEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.globl	"??0fail_fast@gsl@@QEAA@QEBD@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@QEBD@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@QEBD@Z":        # @"??0fail_fast@gsl@@QEAA@QEBD@Z"
.Lfunc_begin12:
	.cv_func_id 12
	.cv_loc	12 3 99 0               # ..\include\gsl/gsl_assert:99:0
.seh_proc "??0fail_fast@gsl@@QEAA@QEBD@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp42:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@PEBD@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp43:
.Lfunc_end12:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1fail_fast@gsl@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1fail_fast@gsl@@UEAA@XZ"
	.globl	"??1fail_fast@gsl@@UEAA@XZ" # -- Begin function ??1fail_fast@gsl@@UEAA@XZ
	.p2align	4, 0x90
"??1fail_fast@gsl@@UEAA@XZ":            # @"??1fail_fast@gsl@@UEAA@XZ"
.Lfunc_begin13:
	.cv_func_id 13
	.cv_loc	13 3 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??1fail_fast@gsl@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp44:
	.cv_loc	13 3 97 0               # ..\include\gsl/gsl_assert:97:0
	call	"??1logic_error@std@@UEAA@XZ"
.Ltmp45:
	.cv_loc	13 3 97 0               # ..\include\gsl/gsl_assert:97:0
	nop
	add	rsp, 40
	ret
.Ltmp46:
.Lfunc_end13:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1fail_fast@gsl@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.globl	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # -- Begin function ?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ
	.p2align	4, 0x90
"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ": # @"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
.Lfunc_begin14:
	.cv_func_id 14
	.cv_loc	14 2 323 0              # ..\include\gsl/span:323:0
.seh_proc "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	xor	eax, eax
                                        # kill: def $rax killed $eax
	mov	qword ptr [rsp], rcx
.Ltmp47:
	pop	rcx
	ret
.Ltmp48:
.Lfunc_end14:
	.seh_handlerdata
	.section	.text,"xr",discard,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.globl	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # -- Begin function ??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z
	.p2align	4, 0x90
"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z": # @"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
.Lfunc_begin15:
	.cv_func_id 15
	.cv_file	4 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits" "31392DB14D6313D8182AD771AA06F210" 1
	.cv_loc	15 4 1573 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1573:0
.seh_proc "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
.Ltmp49:
	.cv_loc	15 4 1574 0             # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\type_traits:1574:0
	mov	rax, qword ptr [rsp]
	pop	rcx
	ret
.Ltmp50:
.Lfunc_end15:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.globl	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@$$QEAU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z":   # @"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
.Lfunc_begin16:
	.cv_func_id 16
	.cv_loc	16 3 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp51:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp52:
.Lfunc_end16:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0fail_fast@gsl@@QEAA@AEBU01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.globl	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # -- Begin function ??0fail_fast@gsl@@QEAA@AEBU01@@Z
	.p2align	4, 0x90
"??0fail_fast@gsl@@QEAA@AEBU01@@Z":     # @"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
.Lfunc_begin17:
	.cv_func_id 17
	.cv_loc	17 3 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??0fail_fast@gsl@@QEAA@AEBU01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp53:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0logic_error@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7fail_fast@gsl@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp54:
.Lfunc_end17:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.globl	"??0logic_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0logic_error@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@AEBV01@@Z":   # @"??0logic_error@std@@QEAA@AEBV01@@Z"
.Lfunc_begin18:
	.cv_func_id 18
	.cv_file	5 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept" "2FE06AF7EACFB232C6FF033DBFC4412E" 1
	.cv_loc	18 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??0logic_error@std@@QEAA@AEBV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp55:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp56:
.Lfunc_end18:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@AEBV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.globl	"??0exception@std@@QEAA@AEBV01@@Z" # -- Begin function ??0exception@std@@QEAA@AEBV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QEAA@AEBV01@@Z":     # @"??0exception@std@@QEAA@AEBV01@@Z"
.Lfunc_begin19:
	.cv_func_id 19
	.cv_file	6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h" "6C163BAA92D5C81892AD5480D109CCEE" 1
	.cv_loc	19 6 68 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:68:0
.seh_proc "??0exception@std@@QEAA@AEBV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	xor	eax, eax
	mov	r8d, 16
                                        # kill: def $r8 killed $r8d
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp57:
	mov	qword ptr [rcx], r9
	mov	rdx, rcx
	add	rdx, 8
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	edx, eax
	call	memset
.Ltmp58:
	.cv_loc	19 6 69 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:69:0
	mov	rcx, qword ptr [rsp + 48] # 8-byte Reload
	add	rcx, 8
	mov	r8, qword ptr [rsp + 64]
	add	r8, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, r8
	mov	rdx, qword ptr [rsp + 40] # 8-byte Reload
	call	__std_exception_copy
.Ltmp59:
	.cv_loc	19 6 70 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:70:0
	mov	rax, qword ptr [rsp + 48] # 8-byte Reload
	add	rsp, 72
	ret
.Ltmp60:
.Lfunc_end19:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@$$QEAV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.globl	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # -- Begin function ??0logic_error@std@@QEAA@$$QEAV01@@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@$$QEAV01@@Z": # @"??0logic_error@std@@QEAA@$$QEAV01@@Z"
.Lfunc_begin20:
	.cv_func_id 20
	.cv_loc	20 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??0logic_error@std@@QEAA@$$QEAV01@@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp61:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@AEBV01@@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp62:
.Lfunc_end20:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gfail_fast@gsl@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.globl	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # -- Begin function ??_Gfail_fast@gsl@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gfail_fast@gsl@@UEAAPEAXI@Z":       # @"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
.Lfunc_begin21:
	.cv_func_id 21
	.cv_loc	21 3 97 0               # ..\include\gsl/gsl_assert:97:0
.seh_proc "??_Gfail_fast@gsl@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp63:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1fail_fast@gsl@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB21_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB21_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp64:
.Lfunc_end21:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?what@exception@std@@UEBAPEBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
	.globl	"?what@exception@std@@UEBAPEBDXZ" # -- Begin function ?what@exception@std@@UEBAPEBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UEBAPEBDXZ":      # @"?what@exception@std@@UEBAPEBDXZ"
.Lfunc_begin22:
	.cv_func_id 22
	.cv_loc	22 6 90 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:90:0
.seh_proc "?what@exception@std@@UEBAPEBDXZ"
# %bb.0:
	sub	rsp, 24
	.seh_stackalloc 24
	.seh_endprologue
	mov	qword ptr [rsp + 16], rcx
	mov	rcx, qword ptr [rsp + 16]
.Ltmp65:
	.cv_loc	22 6 91 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:91:0
	cmp	qword ptr [rcx + 8], 0
	mov	qword ptr [rsp + 8], rcx # 8-byte Spill
	je	.LBB22_2
# %bb.1:
	mov	rax, qword ptr [rsp + 8] # 8-byte Reload
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [rsp], rcx    # 8-byte Spill
	jmp	.LBB22_3
.LBB22_2:
	lea	rax, [rip + "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
	mov	qword ptr [rsp], rax    # 8-byte Spill
	jmp	.LBB22_3
.LBB22_3:
	mov	rax, qword ptr [rsp]    # 8-byte Reload
	add	rsp, 24
	ret
.Ltmp66:
.Lfunc_end22:
	.seh_handlerdata
	.section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_Glogic_error@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.globl	"??_Glogic_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Glogic_error@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Glogic_error@std@@UEAAPEAXI@Z":     # @"??_Glogic_error@std@@UEAAPEAXI@Z"
.Lfunc_begin23:
	.cv_func_id 23
	.cv_loc	23 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??_Glogic_error@std@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp67:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1logic_error@std@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB23_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB23_2:
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp68:
.Lfunc_end23:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??1logic_error@std@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1logic_error@std@@UEAA@XZ"
	.globl	"??1logic_error@std@@UEAA@XZ" # -- Begin function ??1logic_error@std@@UEAA@XZ
	.p2align	4, 0x90
"??1logic_error@std@@UEAA@XZ":          # @"??1logic_error@std@@UEAA@XZ"
.Lfunc_begin24:
	.cv_func_id 24
	.cv_loc	24 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
.seh_proc "??1logic_error@std@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp69:
	.cv_loc	24 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
	call	"??1exception@std@@UEAA@XZ"
.Ltmp70:
	.cv_loc	24 5 17 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:17:0
	nop
	add	rsp, 40
	ret
.Ltmp71:
.Lfunc_end24:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1logic_error@std@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??1exception@std@@UEAA@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.globl	"??1exception@std@@UEAA@XZ" # -- Begin function ??1exception@std@@UEAA@XZ
	.p2align	4, 0x90
"??1exception@std@@UEAA@XZ":            # @"??1exception@std@@UEAA@XZ"
.Lfunc_begin25:
	.cv_func_id 25
	.cv_loc	25 6 85 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:85:0
.seh_proc "??1exception@std@@UEAA@XZ"
# %bb.0:
	sub	rsp, 40
	.seh_stackalloc 40
	.seh_endprologue
	lea	rax, [rip + "??_7exception@std@@6B@"]
	mov	qword ptr [rsp + 32], rcx
	mov	rcx, qword ptr [rsp + 32]
.Ltmp72:
	mov	qword ptr [rcx], rax
.Ltmp73:
	.cv_loc	25 6 86 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:86:0
	add	rcx, 8
	call	__std_exception_destroy
.Ltmp74:
	.cv_loc	25 6 87 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:87:0
	nop
	add	rsp, 40
	ret
.Ltmp75:
.Lfunc_end25:
	.seh_handlerdata
	.section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
	.seh_endproc
                                        # -- End function
	.def	 "??_Gexception@std@@UEAAPEAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.globl	"??_Gexception@std@@UEAAPEAXI@Z" # -- Begin function ??_Gexception@std@@UEAAPEAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UEAAPEAXI@Z":       # @"??_Gexception@std@@UEAAPEAXI@Z"
.Lfunc_begin26:
	.cv_func_id 26
	.cv_loc	26 6 85 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:85:0
.seh_proc "??_Gexception@std@@UEAAPEAXI@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	dword ptr [rsp + 60], edx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
	mov	rax, rcx
	mov	qword ptr [rsp + 64], rax
	mov	edx, dword ptr [rsp + 60]
.Ltmp76:
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	dword ptr [rsp + 36], edx # 4-byte Spill
	call	"??1exception@std@@UEAA@XZ"
	mov	edx, dword ptr [rsp + 36] # 4-byte Reload
	cmp	edx, 0
	je	.LBB26_2
# %bb.1:
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	mov	rcx, rax
	call	"??3@YAXPEAX@Z"
.LBB26_2:
	.cv_loc	26 6 87 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:87:0
	mov	rax, qword ptr [rsp + 64]
	add	rsp, 72
	ret
.Ltmp77:
.Lfunc_end26:
	.seh_handlerdata
	.section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0logic_error@std@@QEAA@PEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.globl	"??0logic_error@std@@QEAA@PEBD@Z" # -- Begin function ??0logic_error@std@@QEAA@PEBD@Z
	.p2align	4, 0x90
"??0logic_error@std@@QEAA@PEBD@Z":      # @"??0logic_error@std@@QEAA@PEBD@Z"
.Lfunc_begin27:
	.cv_func_id 27
	.cv_loc	27 5 30 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:30:0
.seh_proc "??0logic_error@std@@QEAA@PEBD@Z"
# %bb.0:
	sub	rsp, 72
	.seh_stackalloc 72
	.seh_endprologue
	mov	qword ptr [rsp + 64], rdx
	mov	qword ptr [rsp + 56], rcx
	mov	rcx, qword ptr [rsp + 56]
.Ltmp78:
	mov	rdx, rcx
	mov	rax, qword ptr [rsp + 64]
	mov	qword ptr [rsp + 48], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	rdx, rax
	call	"??0exception@std@@QEAA@QEBD@Z"
	lea	rcx, [rip + "??_7logic_error@std@@6B@"]
	mov	rdx, qword ptr [rsp + 48] # 8-byte Reload
	mov	qword ptr [rdx], rcx
	.cv_loc	27 5 31 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept:31:0
	mov	qword ptr [rsp + 40], rax # 8-byte Spill
	mov	rax, rdx
	add	rsp, 72
	ret
.Ltmp79:
.Lfunc_end27:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0logic_error@std@@QEAA@PEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "??0exception@std@@QEAA@QEBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
	.globl	"??0exception@std@@QEAA@QEBD@Z" # -- Begin function ??0exception@std@@QEAA@QEBD@Z
	.p2align	4, 0x90
"??0exception@std@@QEAA@QEBD@Z":        # @"??0exception@std@@QEAA@QEBD@Z"
.Lfunc_begin28:
	.cv_func_id 28
	.cv_loc	28 6 55 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:55:0
.seh_proc "??0exception@std@@QEAA@QEBD@Z"
# %bb.0:
	sub	rsp, 88
	.seh_stackalloc 88
	.seh_endprologue
	xor	eax, eax
	mov	r8d, 16
                                        # kill: def $r8 killed $r8d
	lea	r9, [rip + "??_7exception@std@@6B@"]
	mov	r10, qword ptr [rip + __security_cookie]
	xor	r10, rsp
	mov	qword ptr [rsp + 80], r10
	mov	qword ptr [rsp + 56], rdx
	mov	qword ptr [rsp + 48], rcx
	mov	rcx, qword ptr [rsp + 48]
.Ltmp80:
	mov	qword ptr [rcx], r9
	mov	rdx, rcx
	add	rdx, 8
	mov	qword ptr [rsp + 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	edx, eax
	call	memset
.Ltmp81:
	.cv_loc	28 6 56 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:56:0
	mov	rcx, qword ptr [rsp + 56]
	mov	qword ptr [rsp + 64], rcx
	mov	byte ptr [rsp + 72], 1
	.cv_loc	28 6 57 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:57:0
	mov	rcx, qword ptr [rsp + 40] # 8-byte Reload
	add	rcx, 8
	lea	r8, [rsp + 64]
.Ltmp82:
	#DEBUG_VALUE: _InitData <- [$r8+0]
	mov	qword ptr [rsp + 32], rcx # 8-byte Spill
	mov	rcx, r8
	mov	rdx, qword ptr [rsp + 32] # 8-byte Reload
	call	__std_exception_copy
.Ltmp83:
	mov	rcx, qword ptr [rsp + 80]
	xor	rcx, rsp
	call	__security_check_cookie
.Ltmp84:
	.cv_loc	28 6 58 0               # C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h:58:0
	mov	rax, qword ptr [rsp + 40] # 8-byte Reload
	add	rsp, 88
	ret
.Ltmp85:
.Lfunc_end28:
	.seh_handlerdata
	.section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
	.seh_endproc
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
.Lfunc_begin29:
	.cv_func_id 29
	.cv_loc	29 2 602 0              # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp86:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp87:
.Lfunc_end29:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.seh_endproc
                                        # -- End function
	.def	 "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.globl	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # -- Begin function ??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z
	.p2align	4, 0x90
"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z": # @"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
.Lfunc_begin30:
	.cv_func_id 30
	.cv_loc	30 2 597 0              # ..\include\gsl/span:597:0
.seh_proc "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
	push	rbp
	.seh_pushreg 5
	sub	rsp, 208
	.seh_stackalloc 208
	lea	rbp, [rsp + 128]
	.seh_setframe 5, 128
	.seh_endprologue
	mov	qword ptr [rbp + 72], -2
	mov	byte ptr [rbp + 56], r8b
	mov	qword ptr [rbp + 48], rdx
	mov	qword ptr [rbp + 40], rcx
	mov	rcx, qword ptr [rbp + 40]
	mov	qword ptr [rbp + 64], rcx
.Ltmp92:
	mov	rdx, rcx
	mov	r8b, byte ptr [rbp + 32]
	mov	qword ptr [rbp - 40], rcx # 8-byte Spill
	mov	rcx, rdx
	mov	dl, r8b
	call	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	mov	rcx, qword ptr [rbp + 48]
	mov	r9, qword ptr [rbp - 40] # 8-byte Reload
	mov	qword ptr [r9 + 8], rcx
.Ltmp93:
	.cv_loc	30 2 598 0              # ..\include\gsl/span:598:0
	mov	rcx, r9
	mov	qword ptr [rbp - 48], rax # 8-byte Spill
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	setge	dl
	mov	byte ptr [rbp + 7], 0
	test	dl, 1
	jne	.LBB30_1
	jmp	.LBB30_2
.LBB30_1:
	test	byte ptr [rbp + 7], 1
	jne	.LBB30_4
	jmp	.LBB30_5
.LBB30_2:
	lea	rdx, [rip + "??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp + 8]
	mov	rcx, rax
	mov	qword ptr [rbp - 56], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp + 7], 1
.Ltmp88:
	mov	rcx, qword ptr [rbp - 56] # 8-byte Reload
	mov	qword ptr [rbp - 64], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp89:
	jmp	.LBB30_3
.LBB30_3:
	ud2
.LBB30_4:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB30_5:
	.cv_loc	30 2 599 0              # ..\include\gsl/span:599:0
	mov	rax, qword ptr [rbp + 48]
	mov	byte ptr [rbp - 25], 0
	cmp	rax, 0
	mov	cl, 1
	mov	byte ptr [rbp - 65], cl # 1-byte Spill
	jne	.LBB30_7
# %bb.6:
	mov	rax, qword ptr [rbp - 40] # 8-byte Reload
	mov	rcx, rax
	call	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	cmp	rax, 0
	sete	dl
	mov	byte ptr [rbp - 65], dl # 1-byte Spill
.LBB30_7:
	mov	al, byte ptr [rbp - 65] # 1-byte Reload
	test	al, 1
	jne	.LBB30_8
	jmp	.LBB30_9
.LBB30_8:
	test	byte ptr [rbp - 25], 1
	jne	.LBB30_14
	jmp	.LBB30_15
.LBB30_9:
	lea	rdx, [rip + "??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"]
	lea	rax, [rbp - 24]
	mov	rcx, rax
	mov	qword ptr [rbp - 80], rax # 8-byte Spill
	call	"??0fail_fast@gsl@@QEAA@QEBD@Z"
	mov	byte ptr [rbp - 25], 1
.Ltmp90:
	mov	rcx, qword ptr [rbp - 80] # 8-byte Reload
	mov	qword ptr [rbp - 88], rax # 8-byte Spill
	call	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
.Ltmp91:
	jmp	.LBB30_10
.LBB30_10:
	ud2
.LBB30_14:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.Ltmp94:
.LBB30_15:
	.cv_loc	30 2 600 0              # ..\include\gsl/span:600:0
	mov	rax, qword ptr [rbp + 64]
	add	rsp, 208
	pop	rbp
	ret
	.seh_handlerdata
	.long	("$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z")@IMGREL
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB30_11:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
.Ltmp95:
	.cv_loc	30 2 598 0              # ..\include\gsl/span:598:0
	test	byte ptr [rbp + 7], 1
	jne	.LBB30_12
	jmp	.LBB30_13
.LBB30_12:
	lea	rcx, [rbp + 8]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB30_13:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.def	 "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA":
.seh_proc "?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"
.LBB30_16:
	mov	qword ptr [rsp + 16], rdx
	push	rbp
	.seh_pushreg 5
	sub	rsp, 32
	.seh_stackalloc 32
	lea	rbp, [rdx + 128]
	.seh_endprologue
	.cv_loc	30 2 599 0              # ..\include\gsl/span:599:0
	test	byte ptr [rbp - 25], 1
	jne	.LBB30_17
	jmp	.LBB30_18
.LBB30_17:
	lea	rcx, [rbp - 24]
	call	"??1fail_fast@gsl@@UEAA@XZ"
.LBB30_18:
	nop
	add	rsp, 32
	pop	rbp
	ret                             # CLEANUPRET
.Ltmp96:
.Lfunc_end30:
	.seh_handlerdata
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.seh_endproc
	.section	.xdata,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
"$cppxdata$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z":
	.long	429065506               # MagicNumber
	.long	2                       # MaxState
	.long	("$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z")@IMGREL # UnwindMap
	.long	0                       # NumTryBlocks
	.long	0                       # TryBlockMap
	.long	5                       # IPMapEntries
	.long	("$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z")@IMGREL # IPToStateXData
	.long	200                     # UnwindHelp
	.long	0                       # ESTypeList
	.long	1                       # EHFlags
"$stateUnwindMap$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z":
	.long	-1                      # ToState
	.long	"?dtor$11@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
	.long	-1                      # ToState
	.long	"?dtor$16@?0???$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z@4HA"@IMGREL # Action
"$ip2state$??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z":
	.long	.Lfunc_begin30@IMGREL   # IP
	.long	-1                      # ToState
	.long	.Ltmp88@IMGREL+1        # IP
	.long	0                       # ToState
	.long	.Ltmp89@IMGREL+1        # IP
	.long	-1                      # ToState
	.long	.Ltmp90@IMGREL+1        # IP
	.long	1                       # ToState
	.long	.Ltmp91@IMGREL+1        # IP
	.long	-1                      # ToState
	.section	.text,"xr",discard,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
                                        # -- End function
	.def	 "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.globl	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # -- Begin function ?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ
	.p2align	4, 0x90
"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ": # @"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
.Lfunc_begin31:
	.cv_func_id 31
	.cv_loc	31 2 602 0              # ..\include\gsl/span:602:0
.seh_proc "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
# %bb.0:
	push	rax
	.seh_stackalloc 8
	.seh_endprologue
	mov	qword ptr [rsp], rcx
	mov	rcx, qword ptr [rsp]
.Ltmp97:
	mov	rax, qword ptr [rcx + 8]
	pop	rcx
	ret
.Ltmp98:
.Lfunc_end31:
	.seh_handlerdata
	.section	.text,"xr",discard,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.seh_endproc
                                        # -- End function
	.section	.rdata,"dr",discard,"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@PPPKJHO@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 598"

	.section	.rdata,"dr",discard,"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
	.globl	"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@" # @"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@"
"??_C@_0DG@BGOEJIDP@GSL?3?5Precondition?5failure?5at?5?4?4?2@":
	.asciz	"GSL: Precondition failure at ..\\include\\gsl/span: 599"

	.section	.data,"dw",discard,"??_R0?AUfail_fast@gsl@@@8"
	.globl	"??_R0?AUfail_fast@gsl@@@8" # @"??_R0?AUfail_fast@gsl@@@8"
	.p2align	4
"??_R0?AUfail_fast@gsl@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AUfail_fast@gsl@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AUfail_fast@gsl@@@824"
	.globl	"_CT??_R0?AUfail_fast@gsl@@@824" # @"_CT??_R0?AUfail_fast@gsl@@@824"
	.p2align	4
"_CT??_R0?AUfail_fast@gsl@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0fail_fast@gsl@@QEAA@AEBU01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVlogic_error@std@@@8"
	.globl	"??_R0?AVlogic_error@std@@@8" # @"??_R0?AVlogic_error@std@@@8"
	.p2align	4
"??_R0?AVlogic_error@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVlogic_error@std@@"
	.zero	2

	.section	.xdata,"dr",discard,"_CT??_R0?AVlogic_error@std@@@824"
	.globl	"_CT??_R0?AVlogic_error@std@@@824" # @"_CT??_R0?AVlogic_error@std@@@824"
	.p2align	4
"_CT??_R0?AVlogic_error@std@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0logic_error@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8" # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.quad	"??_7type_info@@6B@"
	.quad	0
	.asciz	".?AVexception@std@@"
	.zero	4

	.section	.xdata,"dr",discard,"_CT??_R0?AVexception@std@@@824"
	.globl	"_CT??_R0?AVexception@std@@@824" # @"_CT??_R0?AVexception@std@@@824"
	.p2align	4
"_CT??_R0?AVexception@std@@@824":
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	"??0exception@std@@QEAA@AEBV01@@Z"@IMGREL

	.section	.xdata,"dr",discard,"_CTA3?AUfail_fast@gsl@@"
	.globl	"_CTA3?AUfail_fast@gsl@@" # @"_CTA3?AUfail_fast@gsl@@"
	.p2align	3
"_CTA3?AUfail_fast@gsl@@":
	.long	3                       # 0x3
	.long	"_CT??_R0?AUfail_fast@gsl@@@824"@IMGREL
	.long	"_CT??_R0?AVlogic_error@std@@@824"@IMGREL
	.long	"_CT??_R0?AVexception@std@@@824"@IMGREL

	.section	.xdata,"dr",discard,"_TI3?AUfail_fast@gsl@@"
	.globl	"_TI3?AUfail_fast@gsl@@" # @"_TI3?AUfail_fast@gsl@@"
	.p2align	3
"_TI3?AUfail_fast@gsl@@":
	.long	0                       # 0x0
	.long	"??1fail_fast@gsl@@UEAA@XZ"@IMGREL
	.long	0                       # 0x0
	.long	"_CTA3?AUfail_fast@gsl@@"@IMGREL

	.section	.rdata,"dr",largest,"??_7fail_fast@gsl@@6B@"
	.p2align	4               # @0
.L__unnamed_1:
	.quad	"??_R4fail_fast@gsl@@6B@"
	.quad	"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4fail_fast@gsl@@6B@"
	.globl	"??_R4fail_fast@gsl@@6B@" # @"??_R4fail_fast@gsl@@6B@"
	.p2align	4
"??_R4fail_fast@gsl@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	"??_R3fail_fast@gsl@@8"@IMGREL
	.long	"??_R4fail_fast@gsl@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_R3fail_fast@gsl@@8"
	.globl	"??_R3fail_fast@gsl@@8" # @"??_R3fail_fast@gsl@@8"
	.p2align	3
"??_R3fail_fast@gsl@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	"??_R2fail_fast@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2fail_fast@gsl@@8"
	.globl	"??_R2fail_fast@gsl@@8" # @"??_R2fail_fast@gsl@@8"
	.p2align	2
"??_R2fail_fast@gsl@@8":
	.long	"??_R1A@?0A@EA@fail_fast@gsl@@8"@IMGREL
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.globl	"??_R1A@?0A@EA@fail_fast@gsl@@8" # @"??_R1A@?0A@EA@fail_fast@gsl@@8"
	.p2align	4
"??_R1A@?0A@EA@fail_fast@gsl@@8":
	.long	"??_R0?AUfail_fast@gsl@@@8"@IMGREL
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3fail_fast@gsl@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@logic_error@std@@8"
	.globl	"??_R1A@?0A@EA@logic_error@std@@8" # @"??_R1A@?0A@EA@logic_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@logic_error@std@@8":
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3logic_error@std@@8"
	.globl	"??_R3logic_error@std@@8" # @"??_R3logic_error@std@@8"
	.p2align	3
"??_R3logic_error@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	"??_R2logic_error@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2logic_error@std@@8"
	.globl	"??_R2logic_error@std@@8" # @"??_R2logic_error@std@@8"
	.p2align	2
"??_R2logic_error@std@@8":
	.long	"??_R1A@?0A@EA@logic_error@std@@8"@IMGREL
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	"??_R3exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8" # @"??_R3exception@std@@8"
	.p2align	3
"??_R3exception@std@@8":
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	"??_R2exception@std@@8"@IMGREL

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8" # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
	.long	0                       # 0x0

	.section	.rdata,"dr",largest,"??_7logic_error@std@@6B@"
	.p2align	4               # @1
.L__unnamed_2:
	.quad	"??_R4logic_error@std@@6B@"
	.quad	"??_Glogic_error@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4logic_error@std@@6B@"
	.globl	"??_R4logic_error@std@@6B@" # @"??_R4logic_error@std@@6B@"
	.p2align	4
"??_R4logic_error@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVlogic_error@std@@@8"@IMGREL
	.long	"??_R3logic_error@std@@8"@IMGREL
	.long	"??_R4logic_error@std@@6B@"@IMGREL

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	4               # @2
.L__unnamed_3:
	.quad	"??_R4exception@std@@6B@"
	.quad	"??_Gexception@std@@UEAAPEAXI@Z"
	.quad	"?what@exception@std@@UEBAPEBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@" # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	"??_R0?AVexception@std@@@8"@IMGREL
	.long	"??_R3exception@std@@8"@IMGREL
	.long	"??_R4exception@std@@6B@"@IMGREL

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.drectve,"yn"
	.ascii	" /DEFAULTLIB:msvcrtd.lib"
	.ascii	" /DEFAULTLIB:oldnames.lib"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=2\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MDd_DynamicDebug\""
	.ascii	" /DEFAULTLIB:msvcprtd.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
	.section	.debug$S,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241
	.long	.Ltmp100-.Ltmp99        # Subsection size
.Ltmp99:
	.short	.Ltmp102-.Ltmp101       # Record length
.Ltmp101:
	.short	4412                    # Record kind: S_COMPILE3
	.long	1                       # Flags and language
	.short	208                     # CPUType
	.short	7                       # Frontend version
	.short	0
	.short	1
	.short	0
	.short	7001                    # Backend version
	.short	0
	.short	0
	.short	0
	.asciz	"clang version 7.0.1 (tags/RELEASE_701/final)" # Null-terminated compiler version string
.Ltmp102:
.Ltmp100:
	.p2align	2
	.long	241                     # Symbol subsection for foo
	.long	.Ltmp104-.Ltmp103       # Subsection size
.Ltmp103:
	.short	.Ltmp106-.Ltmp105       # Record length
.Ltmp105:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end0-"?foo@@YA_NXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4098                    # Function type index
	.secrel32	"?foo@@YA_NXZ"  # Function section relative address
	.secidx	"?foo@@YA_NXZ"          # Function section index
	.byte	0                       # Flags
	.asciz	"foo"                   # Function name
.Ltmp106:
	.short	.Ltmp108-.Ltmp107       # Record length
.Ltmp107:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp7-.Ltmp0           # Code size
	.secrel32	.Ltmp0          # Function section relative address
	.secidx	.Lfunc_begin0           # Function section index
	.byte	0                       # Lexical block name
.Ltmp108:
	.short	.Ltmp110-.Ltmp109       # Record length
.Ltmp109:
	.short	4414                    # Record kind: S_LOCAL
	.long	48                      # TypeIndex
	.short	0                       # Flags
	.asciz	"ret"
.Ltmp110:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000_\000\000\000"
	.short	.Ltmp112-.Ltmp111       # Record length
.Ltmp111:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s"
.Ltmp112:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000\200\000\000\000"
	.short	.Ltmp114-.Ltmp113       # Record length
.Ltmp113:
	.short	4414                    # Record kind: S_LOCAL
	.long	4210                    # TypeIndex
	.short	0                       # Flags
	.asciz	"cs"
.Ltmp114:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000p\000\000\000"
	.short	.Ltmp116-.Ltmp115       # Record length
.Ltmp115:
	.short	4414                    # Record kind: S_LOCAL
	.long	4149                    # TypeIndex
	.short	0                       # Flags
	.asciz	"s2"
.Ltmp116:
	.cv_def_range	 .Ltmp0 .Ltmp7, "E\021O\001\000\000`\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp104:
	.p2align	2
	.cv_linetable	0, "?foo@@YA_NXZ", .Lfunc_end0
	.section	.debug$S,"dr",associative,"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::span<0,void>
	.long	.Ltmp118-.Ltmp117       # Subsection size
.Ltmp117:
	.short	.Ltmp120-.Ltmp119       # Record length
.Ltmp119:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end1-"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4218                    # Function type index
	.secrel32	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::span<0,void>" # Function name
.Ltmp120:
	.short	.Ltmp122-.Ltmp121       # Record length
.Ltmp121:
	.short	4414                    # Record kind: S_LOCAL
	.long	4102                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp122:
	.cv_def_range	 .Ltmp10 .Ltmp11, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp118:
	.p2align	2
	.cv_linetable	1, "??$?0$0A@X@?$span@H$0?0@gsl@@QEAA@XZ", .Lfunc_end1
	.section	.debug$S,"dr",associative,"?size@?$span@H$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::size
	.long	.Ltmp124-.Ltmp123       # Subsection size
.Ltmp123:
	.short	.Ltmp126-.Ltmp125       # Record length
.Ltmp125:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end2-"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4219                    # Function type index
	.secrel32	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@H$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::size" # Function name
.Ltmp126:
	.short	.Ltmp128-.Ltmp127       # Record length
.Ltmp127:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp128:
	.cv_def_range	 .Ltmp12 .Ltmp13, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp124:
	.p2align	2
	.cv_linetable	2, "?size@?$span@H$0?0@gsl@@QEBA_JXZ", .Lfunc_end2
	.section	.debug$S,"dr",associative,"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::data
	.long	.Ltmp130-.Ltmp129       # Subsection size
.Ltmp129:
	.short	.Ltmp132-.Ltmp131       # Record length
.Ltmp131:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end3-"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4220                    # Function type index
	.secrel32	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::data" # Function name
.Ltmp132:
	.short	.Ltmp134-.Ltmp133       # Record length
.Ltmp133:
	.short	4414                    # Record kind: S_LOCAL
	.long	4126                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp134:
	.cv_def_range	 .Ltmp14 .Ltmp15, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp130:
	.p2align	2
	.cv_linetable	3, "?data@?$span@H$0?0@gsl@@QEBAPEAHXZ", .Lfunc_end3
	.section	.debug$S,"dr",associative,"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::span<0,void>
	.long	.Ltmp136-.Ltmp135       # Subsection size
.Ltmp135:
	.short	.Ltmp138-.Ltmp137       # Record length
.Ltmp137:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end4-"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4221                    # Function type index
	.secrel32	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::span<0,void>" # Function name
.Ltmp138:
	.short	.Ltmp140-.Ltmp139       # Record length
.Ltmp139:
	.short	4414                    # Record kind: S_LOCAL
	.long	4169                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp140:
	.cv_def_range	 .Ltmp18 .Ltmp19, "E\021N\001\000\000\360\377\377\377"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp136:
	.p2align	2
	.cv_linetable	4, "??$?0$0A@X@?$span@$$CBH$0?0@gsl@@QEAA@XZ", .Lfunc_end4
	.section	.debug$S,"dr",associative,"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::size
	.long	.Ltmp142-.Ltmp141       # Subsection size
.Ltmp141:
	.short	.Ltmp144-.Ltmp143       # Record length
.Ltmp143:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end5-"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4222                    # Function type index
	.secrel32	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::size" # Function name
.Ltmp144:
	.short	.Ltmp146-.Ltmp145       # Record length
.Ltmp145:
	.short	4414                    # Record kind: S_LOCAL
	.long	4189                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp146:
	.cv_def_range	 .Ltmp20 .Ltmp21, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp142:
	.p2align	2
	.cv_linetable	5, "?size@?$span@$$CBH$0?0@gsl@@QEBA_JXZ", .Lfunc_end5
	.section	.debug$S,"dr",associative,"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::data
	.long	.Ltmp148-.Ltmp147       # Subsection size
.Ltmp147:
	.short	.Ltmp150-.Ltmp149       # Record length
.Ltmp149:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end6-"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4223                    # Function type index
	.secrel32	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section relative address
	.secidx	"?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::data" # Function name
.Ltmp150:
	.short	.Ltmp152-.Ltmp151       # Record length
.Ltmp151:
	.short	4414                    # Record kind: S_LOCAL
	.long	4189                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp152:
	.cv_def_range	 .Ltmp22 .Ltmp23, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp148:
	.p2align	2
	.cv_linetable	6, "?data@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ", .Lfunc_end6
	.section	.debug$S,"dr",associative,"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::extent_type
	.long	.Ltmp154-.Ltmp153       # Subsection size
.Ltmp153:
	.short	.Ltmp156-.Ltmp155       # Record length
.Ltmp155:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end7-"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4235                    # Function type index
	.secrel32	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Function section relative address
	.secidx	"??0?$extent_type@$0A@@details@gsl@@QEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::extent_type" # Function name
.Ltmp156:
	.short	.Ltmp158-.Ltmp157       # Record length
.Ltmp157:
	.short	4414                    # Record kind: S_LOCAL
	.long	4225                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp158:
	.cv_def_range	 .Ltmp24 .Ltmp25, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp154:
	.p2align	2
	.cv_linetable	7, "??0?$extent_type@$0A@@details@gsl@@QEAA@XZ", .Lfunc_end7
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >
	.long	.Ltmp160-.Ltmp159       # Subsection size
.Ltmp159:
	.short	.Ltmp162-.Ltmp161       # Record length
.Ltmp161:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end8-"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4239                    # Function type index
	.secrel32	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >" # Function name
.Ltmp162:
	.short	.Ltmp164-.Ltmp163       # Record length
.Ltmp163:
	.short	4414                    # Record kind: S_LOCAL
	.long	4236                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp164:
	.cv_def_range	 .Ltmp30 .Ltmp34, "E\021N\001\000\000(\000\000\000"
	.short	.Ltmp166-.Ltmp165       # Record length
.Ltmp165:
	.short	4414                    # Record kind: S_LOCAL
	.long	1652                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp166:
	.cv_def_range	 .Ltmp30 .Ltmp34, "E\021N\001\000\0000\000\000\000"
	.short	.Ltmp168-.Ltmp167       # Record length
.Ltmp167:
	.short	4414                    # Record kind: S_LOCAL
	.long	4233                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp168:
	.cv_def_range	 .Ltmp30 .Ltmp34, "E\021N\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp160:
	.p2align	2
	.cv_linetable	8, "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEAA@PEAHV?$extent_type@$0A@@details@2@@Z", .Lfunc_end8
	.section	.debug$S,"dr",associative,"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::extent_type<0>
	.long	.Ltmp170-.Ltmp169       # Subsection size
.Ltmp169:
	.short	.Ltmp172-.Ltmp171       # Record length
.Ltmp171:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end9-"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4242                    # Function type index
	.secrel32	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Function section relative address
	.secidx	"??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::extent_type<0>" # Function name
.Ltmp172:
	.short	.Ltmp174-.Ltmp173       # Record length
.Ltmp173:
	.short	4414                    # Record kind: S_LOCAL
	.long	4159                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp174:
	.cv_def_range	 .Ltmp35 .Ltmp37, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp176-.Ltmp175       # Record length
.Ltmp175:
	.short	4414                    # Record kind: S_LOCAL
	.long	4233                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp176:
	.cv_def_range	 .Ltmp35 .Ltmp37, "E\021O\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp170:
	.p2align	2
	.cv_linetable	9, "??$?0$0A@@?$extent_type@$0?0@details@gsl@@QEAA@V?$extent_type@$0A@@12@@Z", .Lfunc_end9
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<-1>::size
	.long	.Ltmp178-.Ltmp177       # Subsection size
.Ltmp177:
	.short	.Ltmp180-.Ltmp179       # Record length
.Ltmp179:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end10-"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4243                    # Function type index
	.secrel32	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<-1>::size" # Function name
.Ltmp180:
	.short	.Ltmp182-.Ltmp181       # Record length
.Ltmp181:
	.short	4414                    # Record kind: S_LOCAL
	.long	4162                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp182:
	.cv_def_range	 .Ltmp38 .Ltmp39, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp178:
	.p2align	2
	.cv_linetable	10, "?size@?$extent_type@$0?0@details@gsl@@QEBA_JXZ", .Lfunc_end10
	.section	.debug$S,"dr",associative,"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::throw_exception<gsl::fail_fast>
	.long	.Ltmp184-.Ltmp183       # Subsection size
.Ltmp183:
	.short	.Ltmp186-.Ltmp185       # Record length
.Ltmp185:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end11-"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4746                    # Function type index
	.secrel32	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Function section relative address
	.secidx	"??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::throw_exception<gsl::fail_fast>" # Function name
.Ltmp186:
	.short	.Ltmp188-.Ltmp187       # Record length
.Ltmp187:
	.short	4414                    # Record kind: S_LOCAL
	.long	4246                    # TypeIndex
	.short	1                       # Flags
	.asciz	"exception"
.Ltmp188:
	.cv_def_range	 .Ltmp40 .Ltmp41, "E\021O\001\000\000P\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp184:
	.p2align	2
	.cv_linetable	11, "??$throw_exception@Ufail_fast@gsl@@@details@gsl@@YAX$$QEAUfail_fast@1@@Z", .Lfunc_end11
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@QEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp190-.Ltmp189       # Subsection size
.Ltmp189:
	.short	.Ltmp192-.Ltmp191       # Record length
.Ltmp191:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end12-"??0fail_fast@gsl@@QEAA@QEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4747                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@QEBD@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@QEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp192:
	.short	.Ltmp194-.Ltmp193       # Record length
.Ltmp193:
	.short	4414                    # Record kind: S_LOCAL
	.long	4251                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp194:
	.cv_def_range	 .Ltmp42 .Ltmp43, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp196-.Ltmp195       # Record length
.Ltmp195:
	.short	4414                    # Record kind: S_LOCAL
	.long	4253                    # TypeIndex
	.short	1                       # Flags
	.asciz	"message"
.Ltmp196:
	.cv_def_range	 .Ltmp42 .Ltmp43, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp190:
	.p2align	2
	.cv_linetable	12, "??0fail_fast@gsl@@QEAA@QEBD@Z", .Lfunc_end12
	.section	.debug$S,"dr",associative,"??1fail_fast@gsl@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	.Ltmp198-.Ltmp197       # Subsection size
.Ltmp197:
	.short	.Ltmp200-.Ltmp199       # Record length
.Ltmp199:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end13-"??1fail_fast@gsl@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4749                    # Function type index
	.secrel32	"??1fail_fast@gsl@@UEAA@XZ" # Function section relative address
	.secidx	"??1fail_fast@gsl@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
.Ltmp200:
	.short	.Ltmp202-.Ltmp201       # Record length
.Ltmp201:
	.short	4414                    # Record kind: S_LOCAL
	.long	4251                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp202:
	.cv_def_range	 .Ltmp44 .Ltmp46, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp198:
	.p2align	2
	.cv_linetable	13, "??1fail_fast@gsl@@UEAA@XZ", .Lfunc_end13
	.section	.debug$S,"dr",associative,"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::details::extent_type<0>::size
	.long	.Ltmp204-.Ltmp203       # Subsection size
.Ltmp203:
	.short	.Ltmp206-.Ltmp205       # Record length
.Ltmp205:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end14-"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4750                    # Function type index
	.secrel32	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Function section relative address
	.secidx	"?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::details::extent_type<0>::size" # Function name
.Ltmp206:
	.short	.Ltmp208-.Ltmp207       # Record length
.Ltmp207:
	.short	4414                    # Record kind: S_LOCAL
	.long	4230                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp208:
	.cv_def_range	 .Ltmp47 .Ltmp48, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp204:
	.p2align	2
	.cv_linetable	14, "?size@?$extent_type@$0A@@details@gsl@@QEBA_JXZ", .Lfunc_end14
	.section	.debug$S,"dr",associative,"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::forward<gsl::fail_fast>
	.long	.Ltmp210-.Ltmp209       # Subsection size
.Ltmp209:
	.short	.Ltmp212-.Ltmp211       # Record length
.Ltmp211:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end15-"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4755                    # Function type index
	.secrel32	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Function section relative address
	.secidx	"??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::forward<gsl::fail_fast>" # Function name
.Ltmp212:
	.short	.Ltmp214-.Ltmp213       # Record length
.Ltmp213:
	.short	4414                    # Record kind: S_LOCAL
	.long	4752                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Arg"
.Ltmp214:
	.cv_def_range	 .Ltmp49 .Ltmp50, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp210:
	.p2align	2
	.cv_linetable	15, "??$forward@Ufail_fast@gsl@@@std@@YA$$QEAUfail_fast@gsl@@AEAU12@@Z", .Lfunc_end15
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp216-.Ltmp215       # Subsection size
.Ltmp215:
	.short	.Ltmp218-.Ltmp217       # Record length
.Ltmp217:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end16-"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4757                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@$$QEAU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp218:
	.short	.Ltmp220-.Ltmp219       # Record length
.Ltmp219:
	.short	4414                    # Record kind: S_LOCAL
	.long	4251                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp220:
	.cv_def_range	 .Ltmp51 .Ltmp52, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp222-.Ltmp221       # Record length
.Ltmp221:
	.short	4414                    # Record kind: S_LOCAL
	.long	4246                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp222:
	.cv_def_range	 .Ltmp51 .Ltmp52, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp216:
	.p2align	2
	.cv_linetable	16, "??0fail_fast@gsl@@QEAA@$$QEAU01@@Z", .Lfunc_end16
	.section	.debug$S,"dr",associative,"??0fail_fast@gsl@@QEAA@AEBU01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::fail_fast
	.long	.Ltmp224-.Ltmp223       # Subsection size
.Ltmp223:
	.short	.Ltmp226-.Ltmp225       # Record length
.Ltmp225:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end17-"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4762                    # Function type index
	.secrel32	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Function section relative address
	.secidx	"??0fail_fast@gsl@@QEAA@AEBU01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::fail_fast" # Function name
.Ltmp226:
	.short	.Ltmp228-.Ltmp227       # Record length
.Ltmp227:
	.short	4414                    # Record kind: S_LOCAL
	.long	4251                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp228:
	.cv_def_range	 .Ltmp53 .Ltmp54, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp230-.Ltmp229       # Record length
.Ltmp229:
	.short	4414                    # Record kind: S_LOCAL
	.long	4759                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp230:
	.cv_def_range	 .Ltmp53 .Ltmp54, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp224:
	.p2align	2
	.cv_linetable	17, "??0fail_fast@gsl@@QEAA@AEBU01@@Z", .Lfunc_end17
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@AEBV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp232-.Ltmp231       # Subsection size
.Ltmp231:
	.short	.Ltmp234-.Ltmp233       # Record length
.Ltmp233:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end18-"??0logic_error@std@@QEAA@AEBV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4767                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@AEBV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@AEBV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp234:
	.short	.Ltmp236-.Ltmp235       # Record length
.Ltmp235:
	.short	4414                    # Record kind: S_LOCAL
	.long	4261                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp236:
	.cv_def_range	 .Ltmp55 .Ltmp56, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp238-.Ltmp237       # Record length
.Ltmp237:
	.short	4414                    # Record kind: S_LOCAL
	.long	4764                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp238:
	.cv_def_range	 .Ltmp55 .Ltmp56, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp232:
	.p2align	2
	.cv_linetable	18, "??0logic_error@std@@QEAA@AEBV01@@Z", .Lfunc_end18
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@AEBV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp240-.Ltmp239       # Subsection size
.Ltmp239:
	.short	.Ltmp242-.Ltmp241       # Record length
.Ltmp241:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end19-"??0exception@std@@QEAA@AEBV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4768                    # Function type index
	.secrel32	"??0exception@std@@QEAA@AEBV01@@Z" # Function section relative address
	.secidx	"??0exception@std@@QEAA@AEBV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp242:
	.short	.Ltmp244-.Ltmp243       # Record length
.Ltmp243:
	.short	4414                    # Record kind: S_LOCAL
	.long	4277                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp244:
	.cv_def_range	 .Ltmp57 .Ltmp60, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp246-.Ltmp245       # Record length
.Ltmp245:
	.short	4414                    # Record kind: S_LOCAL
	.long	4283                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Other"
.Ltmp246:
	.cv_def_range	 .Ltmp57 .Ltmp60, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp240:
	.p2align	2
	.cv_linetable	19, "??0exception@std@@QEAA@AEBV01@@Z", .Lfunc_end19
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@$$QEAV01@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp248-.Ltmp247       # Subsection size
.Ltmp247:
	.short	.Ltmp250-.Ltmp249       # Record length
.Ltmp249:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end20-"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4772                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@$$QEAV01@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp250:
	.short	.Ltmp252-.Ltmp251       # Record length
.Ltmp251:
	.short	4414                    # Record kind: S_LOCAL
	.long	4261                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp252:
	.cv_def_range	 .Ltmp61 .Ltmp62, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp254-.Ltmp253       # Record length
.Ltmp253:
	.short	4414                    # Record kind: S_LOCAL
	.long	4769                    # TypeIndex
	.short	1                       # Flags
	.byte	0
.Ltmp254:
	.cv_def_range	 .Ltmp61 .Ltmp62, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp248:
	.p2align	2
	.cv_linetable	20, "??0logic_error@std@@QEAA@$$QEAV01@@Z", .Lfunc_end20
	.section	.debug$S,"dr",associative,"??_Gfail_fast@gsl@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::fail_fast::~fail_fast
	.long	.Ltmp256-.Ltmp255       # Subsection size
.Ltmp255:
	.short	.Ltmp258-.Ltmp257       # Record length
.Ltmp257:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end21-"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4749                    # Function type index
	.secrel32	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gfail_fast@gsl@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::fail_fast::~fail_fast" # Function name
.Ltmp258:
	.short	.Ltmp260-.Ltmp259       # Record length
.Ltmp259:
	.short	4414                    # Record kind: S_LOCAL
	.long	4251                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp260:
	.cv_def_range	 .Ltmp63 .Ltmp64, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp262-.Ltmp261       # Record length
.Ltmp261:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp262:
	.cv_def_range	 .Ltmp63 .Ltmp64, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp256:
	.p2align	2
	.cv_linetable	21, "??_Gfail_fast@gsl@@UEAAPEAXI@Z", .Lfunc_end21
	.section	.debug$S,"dr",associative,"?what@exception@std@@UEBAPEBDXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::what
	.long	.Ltmp264-.Ltmp263       # Subsection size
.Ltmp263:
	.short	.Ltmp266-.Ltmp265       # Record length
.Ltmp265:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end22-"?what@exception@std@@UEBAPEBDXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4773                    # Function type index
	.secrel32	"?what@exception@std@@UEBAPEBDXZ" # Function section relative address
	.secidx	"?what@exception@std@@UEBAPEBDXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::what"  # Function name
.Ltmp266:
	.short	.Ltmp268-.Ltmp267       # Record length
.Ltmp267:
	.short	4414                    # Record kind: S_LOCAL
	.long	4289                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp268:
	.cv_def_range	 .Ltmp65 .Ltmp66, "E\021O\001\000\000\020\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp264:
	.p2align	2
	.cv_linetable	22, "?what@exception@std@@UEBAPEBDXZ", .Lfunc_end22
	.section	.debug$S,"dr",associative,"??_Glogic_error@std@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	.Ltmp270-.Ltmp269       # Subsection size
.Ltmp269:
	.short	.Ltmp272-.Ltmp271       # Record length
.Ltmp271:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end23-"??_Glogic_error@std@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4775                    # Function type index
	.secrel32	"??_Glogic_error@std@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Glogic_error@std@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
.Ltmp272:
	.short	.Ltmp274-.Ltmp273       # Record length
.Ltmp273:
	.short	4414                    # Record kind: S_LOCAL
	.long	4261                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp274:
	.cv_def_range	 .Ltmp67 .Ltmp68, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp276-.Ltmp275       # Record length
.Ltmp275:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp276:
	.cv_def_range	 .Ltmp67 .Ltmp68, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp270:
	.p2align	2
	.cv_linetable	23, "??_Glogic_error@std@@UEAAPEAXI@Z", .Lfunc_end23
	.section	.debug$S,"dr",associative,"??1logic_error@std@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::~logic_error
	.long	.Ltmp278-.Ltmp277       # Subsection size
.Ltmp277:
	.short	.Ltmp280-.Ltmp279       # Record length
.Ltmp279:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end24-"??1logic_error@std@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4775                    # Function type index
	.secrel32	"??1logic_error@std@@UEAA@XZ" # Function section relative address
	.secidx	"??1logic_error@std@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::~logic_error" # Function name
.Ltmp280:
	.short	.Ltmp282-.Ltmp281       # Record length
.Ltmp281:
	.short	4414                    # Record kind: S_LOCAL
	.long	4261                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp282:
	.cv_def_range	 .Ltmp69 .Ltmp71, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp278:
	.p2align	2
	.cv_linetable	24, "??1logic_error@std@@UEAA@XZ", .Lfunc_end24
	.section	.debug$S,"dr",associative,"??1exception@std@@UEAA@XZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	.Ltmp284-.Ltmp283       # Subsection size
.Ltmp283:
	.short	.Ltmp286-.Ltmp285       # Record length
.Ltmp285:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end25-"??1exception@std@@UEAA@XZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4776                    # Function type index
	.secrel32	"??1exception@std@@UEAA@XZ" # Function section relative address
	.secidx	"??1exception@std@@UEAA@XZ" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
.Ltmp286:
	.short	.Ltmp288-.Ltmp287       # Record length
.Ltmp287:
	.short	4414                    # Record kind: S_LOCAL
	.long	4277                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp288:
	.cv_def_range	 .Ltmp72 .Ltmp75, "E\021O\001\000\000 \000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp284:
	.p2align	2
	.cv_linetable	25, "??1exception@std@@UEAA@XZ", .Lfunc_end25
	.section	.debug$S,"dr",associative,"??_Gexception@std@@UEAAPEAXI@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::~exception
	.long	.Ltmp290-.Ltmp289       # Subsection size
.Ltmp289:
	.short	.Ltmp292-.Ltmp291       # Record length
.Ltmp291:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end26-"??_Gexception@std@@UEAAPEAXI@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4776                    # Function type index
	.secrel32	"??_Gexception@std@@UEAAPEAXI@Z" # Function section relative address
	.secidx	"??_Gexception@std@@UEAAPEAXI@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::~exception" # Function name
.Ltmp292:
	.short	.Ltmp294-.Ltmp293       # Record length
.Ltmp293:
	.short	4414                    # Record kind: S_LOCAL
	.long	4277                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp294:
	.cv_def_range	 .Ltmp76 .Ltmp77, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp296-.Ltmp295       # Record length
.Ltmp295:
	.short	4414                    # Record kind: S_LOCAL
	.long	116                     # TypeIndex
	.short	1                       # Flags
	.asciz	"should_call_delete"
.Ltmp296:
	.cv_def_range	 .Ltmp76 .Ltmp77, "E\021O\001\000\000<\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp290:
	.p2align	2
	.cv_linetable	26, "??_Gexception@std@@UEAAPEAXI@Z", .Lfunc_end26
	.section	.debug$S,"dr",associative,"??0logic_error@std@@QEAA@PEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::logic_error::logic_error
	.long	.Ltmp298-.Ltmp297       # Subsection size
.Ltmp297:
	.short	.Ltmp300-.Ltmp299       # Record length
.Ltmp299:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end27-"??0logic_error@std@@QEAA@PEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4777                    # Function type index
	.secrel32	"??0logic_error@std@@QEAA@PEBD@Z" # Function section relative address
	.secidx	"??0logic_error@std@@QEAA@PEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::logic_error::logic_error" # Function name
.Ltmp300:
	.short	.Ltmp302-.Ltmp301       # Record length
.Ltmp301:
	.short	4414                    # Record kind: S_LOCAL
	.long	4261                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp302:
	.cv_def_range	 .Ltmp78 .Ltmp79, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp304-.Ltmp303       # Record length
.Ltmp303:
	.short	4414                    # Record kind: S_LOCAL
	.long	4267                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
.Ltmp304:
	.cv_def_range	 .Ltmp78 .Ltmp79, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp298:
	.p2align	2
	.cv_linetable	27, "??0logic_error@std@@QEAA@PEBD@Z", .Lfunc_end27
	.section	.debug$S,"dr",associative,"??0exception@std@@QEAA@QEBD@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for std::exception::exception
	.long	.Ltmp306-.Ltmp305       # Subsection size
.Ltmp305:
	.short	.Ltmp308-.Ltmp307       # Record length
.Ltmp307:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end28-"??0exception@std@@QEAA@QEBD@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4778                    # Function type index
	.secrel32	"??0exception@std@@QEAA@QEBD@Z" # Function section relative address
	.secidx	"??0exception@std@@QEAA@QEBD@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"std::exception::exception" # Function name
.Ltmp308:
	.short	.Ltmp310-.Ltmp309       # Record length
.Ltmp309:
	.short	4414                    # Record kind: S_LOCAL
	.long	4277                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp310:
	.cv_def_range	 .Ltmp80 .Ltmp85, "E\021O\001\000\0000\000\000\000"
	.short	.Ltmp312-.Ltmp311       # Record length
.Ltmp311:
	.short	4414                    # Record kind: S_LOCAL
	.long	4253                    # TypeIndex
	.short	1                       # Flags
	.asciz	"_Message"
.Ltmp312:
	.cv_def_range	 .Ltmp80 .Ltmp85, "E\021O\001\000\0008\000\000\000"
	.short	.Ltmp314-.Ltmp313       # Record length
.Ltmp313:
	.short	4355                    # Record kind: S_BLOCK32
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	.Ltmp84-.Ltmp81         # Code size
	.secrel32	.Ltmp81         # Function section relative address
	.secidx	.Lfunc_begin28          # Function section index
	.byte	0                       # Lexical block name
.Ltmp314:
	.short	.Ltmp316-.Ltmp315       # Record length
.Ltmp315:
	.short	4414                    # Record kind: S_LOCAL
	.long	4492                    # TypeIndex
	.short	0                       # Flags
	.asciz	"_InitData"
.Ltmp316:
	.cv_def_range	 .Ltmp81 .Ltmp84, "E\021O\001\000\000@\000\000\000"
	.short	2                       # Record length
	.short	6                       # Record kind: S_END
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp306:
	.p2align	2
	.cv_linetable	28, "??0exception@std@@QEAA@QEBD@Z", .Lfunc_end28
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp318-.Ltmp317       # Subsection size
.Ltmp317:
	.short	.Ltmp320-.Ltmp319       # Record length
.Ltmp319:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end29-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4779                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp320:
	.short	.Ltmp322-.Ltmp321       # Record length
.Ltmp321:
	.short	4414                    # Record kind: S_LOCAL
	.long	4154                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp322:
	.cv_def_range	 .Ltmp86 .Ltmp87, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp318:
	.p2align	2
	.cv_linetable	29, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@QEBAPEAHXZ", .Lfunc_end29
	.section	.debug$S,"dr",associative,"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >
	.long	.Ltmp324-.Ltmp323       # Subsection size
.Ltmp323:
	.short	.Ltmp326-.Ltmp325       # Record length
.Ltmp325:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end30-"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4783                    # Function type index
	.secrel32	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # Function section relative address
	.secidx	"??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::storage_type<gsl::details::extent_type<0> >" # Function name
.Ltmp326:
	.short	.Ltmp328-.Ltmp327       # Record length
.Ltmp327:
	.short	4414                    # Record kind: S_LOCAL
	.long	4780                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp328:
	.cv_def_range	 .Ltmp92 .Ltmp96, "E\021N\001\000\000(\000\000\000"
	.short	.Ltmp330-.Ltmp329       # Record length
.Ltmp329:
	.short	4414                    # Record kind: S_LOCAL
	.long	4171                    # TypeIndex
	.short	1                       # Flags
	.asciz	"data"
.Ltmp330:
	.cv_def_range	 .Ltmp92 .Ltmp96, "E\021N\001\000\0000\000\000\000"
	.short	.Ltmp332-.Ltmp331       # Record length
.Ltmp331:
	.short	4414                    # Record kind: S_LOCAL
	.long	4233                    # TypeIndex
	.short	1                       # Flags
	.asciz	"ext"
.Ltmp332:
	.cv_def_range	 .Ltmp92 .Ltmp96, "E\021N\001\000\0008\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp324:
	.p2align	2
	.cv_linetable	30, "??$?0V?$extent_type@$0A@@details@gsl@@@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEAA@PEBHV?$extent_type@$0A@@details@2@@Z", .Lfunc_end30
	.section	.debug$S,"dr",associative,"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ"
	.p2align	2
	.long	4                       # Debug section magic
	.long	241                     # Symbol subsection for gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data
	.long	.Ltmp334-.Ltmp333       # Subsection size
.Ltmp333:
	.short	.Ltmp336-.Ltmp335       # Record length
.Ltmp335:
	.short	4423                    # Record kind: S_GPROC32_ID
	.long	0                       # PtrParent
	.long	0                       # PtrEnd
	.long	0                       # PtrNext
	.long	.Lfunc_end31-"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Code size
	.long	0                       # Offset after prologue
	.long	0                       # Offset before epilogue
	.long	4784                    # Function type index
	.secrel32	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section relative address
	.secidx	"?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ" # Function section index
	.byte	0                       # Flags
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::data" # Function name
.Ltmp336:
	.short	.Ltmp338-.Ltmp337       # Record length
.Ltmp337:
	.short	4414                    # Record kind: S_LOCAL
	.long	4213                    # TypeIndex
	.short	1                       # Flags
	.asciz	"this"
.Ltmp338:
	.cv_def_range	 .Ltmp97 .Ltmp98, "E\021O\001\000\000\000\000\000\000"
	.short	2                       # Record length
	.short	4431                    # Record kind: S_PROC_ID_END
.Ltmp334:
	.p2align	2
	.cv_linetable	31, "?data@?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@QEBAPEBHXZ", .Lfunc_end31
	.section	.debug$S,"dr"
	.long	241
	.long	.Ltmp340-.Ltmp339       # Subsection size
.Ltmp339:
	.short	.Ltmp342-.Ltmp341       # Record length
.Ltmp341:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"ptrdiff_t"
.Ltmp342:
	.short	.Ltmp344-.Ltmp343       # Record length
.Ltmp343:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"index_type"
.Ltmp344:
	.short	.Ltmp346-.Ltmp345       # Record length
.Ltmp345:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<int>"
.Ltmp346:
	.short	.Ltmp348-.Ltmp347       # Record length
.Ltmp347:
	.short	4360                    # Record kind: S_UDT
	.long	4149                    # Type
	.asciz	"gsl::span<int,-1>"
.Ltmp348:
	.short	.Ltmp350-.Ltmp349       # Record length
.Ltmp349:
	.short	4360                    # Record kind: S_UDT
	.long	4157                    # Type
	.asciz	"gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp350:
	.short	.Ltmp352-.Ltmp351       # Record length
.Ltmp351:
	.short	4360                    # Record kind: S_UDT
	.long	4165                    # Type
	.asciz	"gsl::details::extent_type<-1>"
.Ltmp352:
	.short	.Ltmp354-.Ltmp353       # Record length
.Ltmp353:
	.short	4360                    # Record kind: S_UDT
	.long	116                     # Type
	.asciz	"std::remove_cv_t<const int>"
.Ltmp354:
	.short	.Ltmp356-.Ltmp355       # Record length
.Ltmp355:
	.short	4360                    # Record kind: S_UDT
	.long	4210                    # Type
	.asciz	"gsl::span<const int,-1>"
.Ltmp356:
	.short	.Ltmp358-.Ltmp357       # Record length
.Ltmp357:
	.short	4360                    # Record kind: S_UDT
	.long	4216                    # Type
	.asciz	"gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >"
.Ltmp358:
	.short	.Ltmp360-.Ltmp359       # Record length
.Ltmp359:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"index_type"
.Ltmp360:
	.short	.Ltmp362-.Ltmp361       # Record length
.Ltmp361:
	.short	4360                    # Record kind: S_UDT
	.long	4233                    # Type
	.asciz	"gsl::details::extent_type<0>"
.Ltmp362:
	.short	.Ltmp364-.Ltmp363       # Record length
.Ltmp363:
	.short	4360                    # Record kind: S_UDT
	.long	4257                    # Type
	.asciz	"gsl::fail_fast"
.Ltmp364:
	.short	.Ltmp366-.Ltmp365       # Record length
.Ltmp365:
	.short	4360                    # Record kind: S_UDT
	.long	4262                    # Type
	.asciz	"std::string"
.Ltmp366:
	.short	.Ltmp368-.Ltmp367       # Record length
.Ltmp367:
	.short	4360                    # Record kind: S_UDT
	.long	4272                    # Type
	.asciz	"std::logic_error"
.Ltmp368:
	.short	.Ltmp370-.Ltmp369       # Record length
.Ltmp369:
	.short	4360                    # Record kind: S_UDT
	.long	4292                    # Type
	.asciz	"std::exception"
.Ltmp370:
	.short	.Ltmp372-.Ltmp371       # Record length
.Ltmp371:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"size_t"
.Ltmp372:
	.short	.Ltmp374-.Ltmp373       # Record length
.Ltmp373:
	.short	4360                    # Record kind: S_UDT
	.long	4352                    # Type
	.asciz	"std::bool_constant<true>"
.Ltmp374:
	.short	.Ltmp376-.Ltmp375       # Record length
.Ltmp375:
	.short	4360                    # Record kind: S_UDT
	.long	4352                    # Type
	.asciz	"std::true_type"
.Ltmp376:
	.short	.Ltmp378-.Ltmp377       # Record length
.Ltmp377:
	.short	4360                    # Record kind: S_UDT
	.long	4355                    # Type
	.asciz	"std::bool_constant<false>"
.Ltmp378:
	.short	.Ltmp380-.Ltmp379       # Record length
.Ltmp379:
	.short	4360                    # Record kind: S_UDT
	.long	4355                    # Type
	.asciz	"std::false_type"
.Ltmp380:
	.short	.Ltmp382-.Ltmp381       # Record length
.Ltmp381:
	.short	4360                    # Record kind: S_UDT
	.long	4299                    # Type
	.asciz	"std::_Rebind_alloc_t<std::allocator<char>,char>"
.Ltmp382:
	.short	.Ltmp384-.Ltmp383       # Record length
.Ltmp383:
	.short	4360                    # Record kind: S_UDT
	.long	4352                    # Type
	.asciz	"std::bool_constant<_Is_specialization_v<std::char_traits<char>,char_traits> && is_trivial_v<std::basic_string<char,std::char_traits<char>,std::allocator<char> >::pointer> >"
.Ltmp384:
	.short	.Ltmp386-.Ltmp385       # Record length
.Ltmp385:
	.short	4360                    # Record kind: S_UDT
	.long	4488                    # Type
	.asciz	"std::basic_string<char,std::char_traits<char>,std::allocator<char> >"
.Ltmp386:
	.short	.Ltmp388-.Ltmp387       # Record length
.Ltmp387:
	.short	4360                    # Record kind: S_UDT
	.long	4492                    # Type
	.asciz	"__std_exception_data"
.Ltmp388:
	.short	.Ltmp390-.Ltmp389       # Record length
.Ltmp389:
	.short	4360                    # Record kind: S_UDT
	.long	4526                    # Type
	.asciz	"std::_Rebind_alloc_t<std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alty,std::_Container_proxy>"
.Ltmp390:
	.short	.Ltmp392-.Ltmp391       # Record length
.Ltmp391:
	.short	4360                    # Record kind: S_UDT
	.long	4528                    # Type
	.asciz	"std::conditional_t<_Is_simple_alloc_v<std::_String_base_types<char,std::allocator<char> >::_Alty>,_Simple_types<char>,_String_iter_types<char,typename _Alty_traits::size_type,typename _Alty_traits::difference_type,typename _Alty_traits::pointer,typename _Alty_traits::const_pointer,char &,const char &> >"
.Ltmp392:
	.short	.Ltmp394-.Ltmp393       # Record length
.Ltmp393:
	.short	4360                    # Record kind: S_UDT
	.long	4537                    # Type
	.asciz	"std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >"
.Ltmp394:
	.short	.Ltmp396-.Ltmp395       # Record length
.Ltmp395:
	.short	4360                    # Record kind: S_UDT
	.long	4559                    # Type
	.asciz	"std::allocator<char>"
.Ltmp396:
	.short	.Ltmp398-.Ltmp397       # Record length
.Ltmp397:
	.short	4360                    # Record kind: S_UDT
	.long	4567                    # Type
	.asciz	"std::integral_constant<bool,1>"
.Ltmp398:
	.short	.Ltmp400-.Ltmp399       # Record length
.Ltmp399:
	.short	4360                    # Record kind: S_UDT
	.long	4574                    # Type
	.asciz	"std::integral_constant<bool,0>"
.Ltmp400:
	.short	.Ltmp402-.Ltmp401       # Record length
.Ltmp401:
	.short	4360                    # Record kind: S_UDT
	.long	4576                    # Type
	.asciz	"std::_Container_base"
.Ltmp402:
	.short	.Ltmp404-.Ltmp403       # Record length
.Ltmp403:
	.short	4360                    # Record kind: S_UDT
	.long	4592                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >"
.Ltmp404:
	.short	.Ltmp406-.Ltmp405       # Record length
.Ltmp405:
	.short	4360                    # Record kind: S_UDT
	.long	19                      # Type
	.asciz	"std::streamoff"
.Ltmp406:
	.short	.Ltmp408-.Ltmp407       # Record length
.Ltmp407:
	.short	4360                    # Record kind: S_UDT
	.long	4618                    # Type
	.asciz	"_Mbstatet"
.Ltmp408:
	.short	.Ltmp410-.Ltmp409       # Record length
.Ltmp409:
	.short	4360                    # Record kind: S_UDT
	.long	4618                    # Type
	.asciz	"mbstate_t"
.Ltmp410:
	.short	.Ltmp412-.Ltmp411       # Record length
.Ltmp411:
	.short	4360                    # Record kind: S_UDT
	.long	4618                    # Type
	.asciz	"_Mbstatet"
.Ltmp412:
	.short	.Ltmp414-.Ltmp413       # Record length
.Ltmp413:
	.short	4360                    # Record kind: S_UDT
	.long	4620                    # Type
	.asciz	"std::char_traits<char>"
.Ltmp414:
	.short	.Ltmp416-.Ltmp415       # Record length
.Ltmp415:
	.short	4360                    # Record kind: S_UDT
	.long	4623                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<char> >::value,_Default_allocator_traits<std::allocator<char> >,_Normal_allocator_traits<std::allocator<char> > >"
.Ltmp416:
	.short	.Ltmp418-.Ltmp417       # Record length
.Ltmp417:
	.short	4360                    # Record kind: S_UDT
	.long	4625                    # Type
	.asciz	"std::allocator_traits<std::allocator<char> >"
.Ltmp418:
	.short	.Ltmp420-.Ltmp419       # Record length
.Ltmp419:
	.short	4360                    # Record kind: S_UDT
	.long	4637                    # Type
	.asciz	"std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>"
.Ltmp420:
	.short	.Ltmp422-.Ltmp421       # Record length
.Ltmp421:
	.short	4360                    # Record kind: S_UDT
	.long	4656                    # Type
	.asciz	"std::_Iterator_base12"
.Ltmp422:
	.short	.Ltmp424-.Ltmp423       # Record length
.Ltmp423:
	.short	4360                    # Record kind: S_UDT
	.long	4660                    # Type
	.asciz	"std::_Container_proxy"
.Ltmp424:
	.short	.Ltmp426-.Ltmp425       # Record length
.Ltmp425:
	.short	4360                    # Record kind: S_UDT
	.long	4686                    # Type
	.asciz	"std::allocator<std::_Container_proxy>"
.Ltmp426:
	.short	.Ltmp428-.Ltmp427       # Record length
.Ltmp427:
	.short	4360                    # Record kind: S_UDT
	.long	4688                    # Type
	.asciz	"std::conditional_t<_Is_default_allocator<allocator<_Container_proxy> >::value,_Default_allocator_traits<std::allocator<std::_Container_proxy> >,_Normal_allocator_traits<std::allocator<std::_Container_proxy> > >"
.Ltmp428:
	.short	.Ltmp430-.Ltmp429       # Record length
.Ltmp429:
	.short	4360                    # Record kind: S_UDT
	.long	4690                    # Type
	.asciz	"std::allocator_traits<std::allocator<std::_Container_proxy> >"
.Ltmp430:
	.short	.Ltmp432-.Ltmp431       # Record length
.Ltmp431:
	.short	4360                    # Record kind: S_UDT
	.long	4693                    # Type
	.asciz	"std::_Simple_types<char>"
.Ltmp432:
	.short	.Ltmp434-.Ltmp433       # Record length
.Ltmp433:
	.short	4360                    # Record kind: S_UDT
	.long	4699                    # Type
	.asciz	"std::_String_val<std::_Simple_types<char> >::_Bxty"
.Ltmp434:
	.short	.Ltmp436-.Ltmp435       # Record length
.Ltmp435:
	.short	4360                    # Record kind: S_UDT
	.long	4713                    # Type
	.asciz	"std::_Container_base12"
.Ltmp436:
	.short	.Ltmp438-.Ltmp437       # Record length
.Ltmp437:
	.short	4360                    # Record kind: S_UDT
	.long	4716                    # Type
	.asciz	"_Mbstatet"
.Ltmp438:
	.short	.Ltmp440-.Ltmp439       # Record length
.Ltmp439:
	.short	4360                    # Record kind: S_UDT
	.long	35                      # Type
	.asciz	"size_type"
.Ltmp440:
	.short	.Ltmp442-.Ltmp441       # Record length
.Ltmp441:
	.short	4360                    # Record kind: S_UDT
	.long	4730                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<char> >"
.Ltmp442:
	.short	.Ltmp444-.Ltmp443       # Record length
.Ltmp443:
	.short	4360                    # Record kind: S_UDT
	.long	4744                    # Type
	.asciz	"std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >"
.Ltmp444:
	.short	.Ltmp446-.Ltmp445       # Record length
.Ltmp445:
	.short	4360                    # Record kind: S_UDT
	.long	4245                    # Type
	.asciz	"std::remove_reference_t<gsl::fail_fast>"
.Ltmp446:
.Ltmp340:
	.p2align	2
	.cv_filechecksums               # File index to string table offset subsection
	.cv_stringtable                 # String table
	.section	.debug$T,"dr"
	.p2align	2
	.long	4                       # Debug section magic
	# ArgList (0x1000) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 0
	#   Arguments [
	#   ]
	# }
	.byte	0x06, 0x00, 0x01, 0x12
	.byte	0x00, 0x00, 0x00, 0x00
	# Procedure (0x1001) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: bool (0x30)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	# FuncId (0x1002) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: 0x0
	#   FunctionType: bool () (0x1001)
	#   Name: foo
	# }
	.byte	0x0e, 0x00, 0x01, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x10, 0x00, 0x00
	.byte	0x66, 0x6f, 0x6f, 0x00
	# Class (0x1003) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x1004) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: __int64 (0x13)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Class (0x1005) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x1006) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1003)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x1007) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1008) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, __int64) (0x1007)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x07, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1009) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: int* (0x674)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	# MemberFunction (0x100A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, int*) (0x1009)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x09, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x100B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::array<int,0>
	#   LinkageName: .?AV?$array@H$0A@@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x72, 0x72, 0x61, 0x79
	.byte	0x3c, 0x69, 0x6e, 0x74
	.byte	0x2c, 0x30, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x72
	.byte	0x72, 0x61, 0x79, 0x40
	.byte	0x48, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Pointer (0x100C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::array<int,0> (0x100B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0b, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x100D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::array<int,0>& (0x100C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0c, 0x10, 0x00, 0x00
	# MemberFunction (0x100E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x100F) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::array<int,0> (0x100B)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x0b, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1010) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::array<int,0> (0x100F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x0f, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1011) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::array<int,0>& (0x1010)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x10, 0x10, 0x00, 0x00
	# MemberFunction (0x1012) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1011)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x11, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1013) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1> (0x1003)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1014) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1013)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1015) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<int,-1>& (0x1014)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x14, 0x10, 0x00, 0x00
	# MemberFunction (0x1016) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1015)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x15, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1017) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@H$0?0@gsl@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x4b, 0x6e, 0x6f
	.byte	0x77, 0x6e, 0x4e, 0x6f
	.byte	0x74, 0x4e, 0x75, 0x6c
	.byte	0x6c, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x4b, 0x6e
	.byte	0x6f, 0x77, 0x6e, 0x4e
	.byte	0x6f, 0x74, 0x4e, 0x75
	.byte	0x6c, 0x6c, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x1018) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<int,-1>::KnownNotNull (0x1017)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1019) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<int,-1>::KnownNotNull, __int64) (0x1018)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x18, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x101A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, __int64) (0x1008)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(int*, int*) (0x100A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(std::array<int,0>&) (0x100E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const std::array<int,0>&) (0x1012)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x1016)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<int,-1>::(gsl::span<int,-1>::KnownNotNull, __int64) (0x1019)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x08, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0a, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0e, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x12, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x16, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x19, 0x10, 0x00, 0x00
	# MemberFunction (0x101B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1> (0x1003)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x101D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1>& (0x101C)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: gsl::span<int,-1>* (0x1006)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<int,-1>&) (0x1015)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x1c, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x06, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x15, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x101E) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1> (0x1013)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x13, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x101F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1020) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1021) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1022) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1023) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1024) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1025) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: int (0x74)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1026) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int& (0x1025)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1027) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1028) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x82, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x1029) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<int,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x7e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# MemberFunction (0x102B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102C) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x41, 0x40, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x102D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x102E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@H$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x72, 0x65, 0x76
	.byte	0x65, 0x72, 0x73, 0x65
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x56, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x24, 0x30
	.byte	0x30, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x102F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1030) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1031) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@H$0?0@gsl@@
	# }
	.byte	0x6e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x73, 0x65, 0x6c
	.byte	0x65, 0x63, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x6f, 0x72
	.byte	0x40, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1032) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<int,-1>::subspan_selector<-1> (0x1031)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x31, 0x10, 0x00, 0x00
	# MemberFunction (0x1033) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<int,-1> (0x1003)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   ThisType: const gsl::span<int,-1>* (0x101E)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<int,-1>::subspan_selector<-1>) (0x1032)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x32, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1034) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1004)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x101A
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<int,-1>::() (0x101B)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1>& gsl::span<int,-1>::(const gsl::span<int,-1>&) (0x101D)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64) (0x1020)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64) (0x1020)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64) (0x1022)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,-1>::() (0x1023)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<int,-1>::() (0x1023)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<int,-1>::() (0x1024)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int& gsl::span<int,-1>::(__int64) (0x1026)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> gsl::span<int,-1>::() (0x1029)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> gsl::span<int,-1>::() (0x102B)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > gsl::span<int,-1>::() (0x102D)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > gsl::span<int,-1>::() (0x102F)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::() (0x1027)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<int,-1>::(__int64, __int64) (0x1030)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<int,-1> gsl::span<int,-1>::(__int64, __int64, gsl::span<int,-1>::subspan_selector<-1>) (0x1033)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int* (0x674)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int& (0x1025)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,0> (0x1028)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<int,-1>,1> (0x102A)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,0> > (0x102C)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<int,-1>,1> > (0x102E)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<int,-1>::KnownNotNull (0x1017)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x1a, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x1d, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x22, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x24, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x26, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x29, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2f, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x30, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x33, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x25, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x28, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2a, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2c, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x2e, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x17, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1035) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1034)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<int,-1>
	#   LinkageName: .?AV?$span@H$0?0@gsl@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x34, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x1036) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\span
	# }
	.byte	0x2a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1037) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1> (0x1035)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x35, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Class (0x1038) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x1039) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x103A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1039)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x39, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x103B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int* (0x674)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   ThisType: const gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x103A)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x3a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x103C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: int* (0x674)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x103D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x103C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@H$0?0@gsl@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x3c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x3a
	.byte	0x3a, 0x73, 0x74, 0x6f
	.byte	0x72, 0x61, 0x67, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x64, 0x79, 0x6e, 0x61
	.byte	0x6d, 0x69, 0x63, 0x5f
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x40
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x3f
	.byte	0x24, 0x73, 0x70, 0x61
	.byte	0x6e, 0x40, 0x48, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x103E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x103D)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x3d, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# Pointer (0x103F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<-1> (0x1038)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1040) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x103F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1041) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<-1> (0x1038)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1042) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<-1> (0x1041)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x41, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1043) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: const gsl::details::extent_type<-1>* (0x1042)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x42, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1044) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: __int64 (0x13)
	#     FieldOffset: 0x0
	#     Name: size_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<-1>::(__int64) (0x1040)
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<-1>::() (0x1043)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x69
	.byte	0x7a, 0x65, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x40, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1045) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1044)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: gsl::details::extent_type<-1>
	#   LinkageName: .?AV?$extent_type@$0?0@details@gsl@@
	# }
	.byte	0x5a, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x44, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1046) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<-1> (0x1045)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 327
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x45, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x01, 0x00, 0x00
	# Class (0x1047) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>
	#   LinkageName: .?AV?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1048) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x1049) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1> (0x1047)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x104A) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: int (0x74)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x104B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x104A)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x104C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x104D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, __int64) (0x104C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x104E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: const int* (0x104B)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	# MemberFunction (0x104F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, const int*) (0x104E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x4e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1050) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::array<int,0>&) (0x100D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x0d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1051) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::array<int,0>&) (0x1011)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x11, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1052) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const int,-1> (0x1047)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1053) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1> (0x1052)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x52, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1054) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::span<const int,-1>& (0x1053)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x53, 0x10, 0x00, 0x00
	# MemberFunction (0x1055) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const int,-1>&) (0x1054)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x54, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1056) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::KnownNotNull
	#   LinkageName: .?AUKnownNotNull@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x62, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x4b
	.byte	0x6e, 0x6f, 0x77, 0x6e
	.byte	0x4e, 0x6f, 0x74, 0x4e
	.byte	0x75, 0x6c, 0x6c, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# ArgList (0x1057) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: gsl::span<const int,-1>::KnownNotNull (0x1056)
	#     ArgType: __int64 (0x13)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x56, 0x10, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# MemberFunction (0x1058) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (gsl::span<const int,-1>::KnownNotNull, __int64) (0x1057)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x57, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1059) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const int*, __int64) (0x104D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const int*, const int*) (0x104F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(std::array<int,0>&) (0x1050)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const std::array<int,0>&) (0x1051)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::(const gsl::span<const int,-1>&) (0x1055)
	#   ]
	#   Method [
	#     AccessSpecifier: Private (0x1)
	#     Type: void gsl::span<const int,-1>::(gsl::span<const int,-1>::KnownNotNull, __int64) (0x1058)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4d, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4f, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x50, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x51, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x55, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x58, 0x10, 0x00, 0x00
	# MemberFunction (0x105A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x105B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1> (0x1047)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x105C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1>& (0x105B)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: gsl::span<const int,-1>* (0x1049)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::span<const int,-1>&) (0x1054)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x5b, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x49, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x54, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x105D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1> (0x1052)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x52, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x105E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x105F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1060) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1061) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1062) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const int (0x104A)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1063) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int& (0x1062)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1064) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104B)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1065) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const int,-1>,0>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBH$0?0@gsl@@$0A@@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1066) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const int,-1>,0> (0x1065)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x65, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1067) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::span_iterator<gsl::span<const int,-1>,1>
	#   LinkageName: .?AV?$span_iterator@V?$span@$$CBH$0?0@gsl@@$00@details@gsl@@
	# }
	.byte	0x8a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# MemberFunction (0x1068) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::details::span_iterator<gsl::span<const int,-1>,1> (0x1067)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1069) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBH$0?0@gsl@@$0A@@details@gsl@@@std@@
	# }
	.byte	0xbe, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x30, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x41, 0x40
	.byte	0x40, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x106A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > (0x1069)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x69, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x106B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> >
	#   LinkageName: .?AV?$reverse_iterator@V?$span_iterator@V?$span@$$CBH$0?0@gsl@@$00@details@gsl@@@std@@
	# }
	.byte	0xba, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x73, 0x70, 0x61
	.byte	0x6e, 0x3c, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x20
	.byte	0x69, 0x6e, 0x74, 0x2c
	.byte	0x2d, 0x31, 0x3e, 0x2c
	.byte	0x31, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x3f, 0x24, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x56, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x24, 0x30, 0x30, 0x40
	.byte	0x64, 0x65, 0x74, 0x61
	.byte	0x69, 0x6c, 0x73, 0x40
	.byte	0x67, 0x73, 0x6c, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# MemberFunction (0x106C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > (0x106B)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x6b, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x106D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (__int64, __int64) (0x1021)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x21, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x106E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::span<const int,-1>::subspan_selector<-1>
	#   LinkageName: .?AV?$subspan_selector@$0?0@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x76, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x75, 0x62, 0x73, 0x70
	.byte	0x61, 0x6e, 0x5f, 0x73
	.byte	0x65, 0x6c, 0x65, 0x63
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x2d, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x75
	.byte	0x62, 0x73, 0x70, 0x61
	.byte	0x6e, 0x5f, 0x73, 0x65
	.byte	0x6c, 0x65, 0x63, 0x74
	.byte	0x6f, 0x72, 0x40, 0x24
	.byte	0x30, 0x3f, 0x30, 0x40
	.byte	0x3f, 0x24, 0x73, 0x70
	.byte	0x61, 0x6e, 0x40, 0x24
	.byte	0x24, 0x43, 0x42, 0x48
	.byte	0x24, 0x30, 0x3f, 0x30
	.byte	0x40, 0x67, 0x73, 0x6c
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x106F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: __int64 (0x13)
	#     ArgType: __int64 (0x13)
	#     ArgType: gsl::span<const int,-1>::subspan_selector<-1> (0x106E)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x6e, 0x10, 0x00, 0x00
	# MemberFunction (0x1070) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: gsl::span<const int,-1> (0x1047)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   ThisType: const gsl::span<const int,-1>* (0x105D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (__int64, __int64, gsl::span<const int,-1>::subspan_selector<-1>) (0x106F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x6f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1071) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const __int64 (0x1004)
	#     Name: extent
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#     FieldOffset: 0x0
	#     Name: storage_
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1059
	#     Name: span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::span<const int,-1>::() (0x105A)
	#     Name: ~span
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1>& gsl::span<const int,-1>::(const gsl::span<const int,-1>&) (0x105C)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64) (0x105E)
	#     Name: first
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64) (0x105E)
	#     Name: last
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64, __int64) (0x105F)
	#     Name: subspan
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<const int,-1>::() (0x1060)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::span<const int,-1>::() (0x1060)
	#     Name: size_bytes
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool gsl::span<const int,-1>::() (0x1061)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(__int64) (0x1063)
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(__int64) (0x1063)
	#     Name: at
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int& gsl::span<const int,-1>::(__int64) (0x1063)
	#     Name: operator()
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1064)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> gsl::span<const int,-1>::() (0x1066)
	#     Name: begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> gsl::span<const int,-1>::() (0x1066)
	#     Name: end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> gsl::span<const int,-1>::() (0x1068)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> gsl::span<const int,-1>::() (0x1068)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > gsl::span<const int,-1>::() (0x106A)
	#     Name: rbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > gsl::span<const int,-1>::() (0x106A)
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > gsl::span<const int,-1>::() (0x106C)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > gsl::span<const int,-1>::() (0x106C)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1064)
	#     Name: _Unchecked_begin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::() (0x1064)
	#     Name: _Unchecked_end
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     MethodKind: Static (0x2)
	#     Type: bool gsl::span<const int,-1>::(__int64, __int64) (0x106D)
	#     Name: CheckRange
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Private (0x1)
	#     Type: gsl::span<const int,-1> gsl::span<const int,-1>::(__int64, __int64, gsl::span<const int,-1>::subspan_selector<-1>) (0x1070)
	#     Name: make_subspan
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int (0x104A)
	#     Name: element_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int* (0x104B)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const int& (0x1062)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,0> (0x1065)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::details::span_iterator<gsl::span<const int,-1>,1> (0x1067)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,0> > (0x1069)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<gsl::details::span_iterator<gsl::span<const int,-1>,1> > (0x106B)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: gsl::span<const int,-1>::KnownNotNull (0x1056)
	#     Name: KnownNotNull
	#   }
	# }
	.byte	0xd6, 0x02, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0x04, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x59, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5a, 0x10, 0x00, 0x00
	.byte	0x7e, 0x73, 0x70, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5c, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x10, 0x00, 0x00
	.byte	0x66, 0x69, 0x72, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x10, 0x00, 0x00
	.byte	0x6c, 0x61, 0x73, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5f, 0x10, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x70, 0x61, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x62, 0x79, 0x74
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x61, 0x10, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x63, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x66, 0x10, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x66, 0x10, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x68, 0x10, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x68, 0x10, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6a, 0x10, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6a, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6c, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x6c, 0x10, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x11, 0x15, 0x09, 0x00
	.byte	0x6d, 0x10, 0x00, 0x00
	.byte	0x43, 0x68, 0x65, 0x63
	.byte	0x6b, 0x52, 0x61, 0x6e
	.byte	0x67, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x01, 0x00
	.byte	0x70, 0x10, 0x00, 0x00
	.byte	0x6d, 0x61, 0x6b, 0x65
	.byte	0x5f, 0x73, 0x75, 0x62
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4a, 0x10, 0x00, 0x00
	.byte	0x65, 0x6c, 0x65, 0x6d
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x65, 0x10, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x67, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x69, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x6b, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x56, 0x10, 0x00, 0x00
	.byte	0x4b, 0x6e, 0x6f, 0x77
	.byte	0x6e, 0x4e, 0x6f, 0x74
	.byte	0x4e, 0x75, 0x6c, 0x6c
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1072) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 43
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1071)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<const int,-1>
	#   LinkageName: .?AV?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x2b, 0x00, 0x10, 0x02
	.byte	0x71, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x40, 0x24, 0x24, 0x43
	.byte	0x42, 0x48, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1073) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const int,-1> (0x1072)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 355
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x72, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x63, 0x01, 0x00, 0x00
	# Modifier (0x1074) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1075) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1074)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x74, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1076) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const int* (0x104B)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   ThisType: const gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x1075)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x75, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1077) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: gsl::details::extent_type<-1> (0x1038)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: const int* (0x104B)
	#     FieldOffset: 0x8
	#     Name: data_
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const int* gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1076)
	#     Name: data
	#   }
	# }
	.byte	0x2e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x08, 0x00, 0x64, 0x61
	.byte	0x74, 0x61, 0x5f, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x76, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1078) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 3
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: <field list> (0x1077)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >
	#   LinkageName: .?AV?$storage_type@V?$extent_type@$0?0@details@gsl@@@?$span@$$CBH$0?0@gsl@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x03, 0x00, 0x08, 0x02
	.byte	0x77, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x73
	.byte	0x70, 0x61, 0x6e, 0x3c
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x20, 0x69, 0x6e
	.byte	0x74, 0x2c, 0x2d, 0x31
	.byte	0x3e, 0x3a, 0x3a, 0x73
	.byte	0x74, 0x6f, 0x72, 0x61
	.byte	0x67, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x3a, 0x3a, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x3c, 0x64, 0x79
	.byte	0x6e, 0x61, 0x6d, 0x69
	.byte	0x63, 0x5f, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x73, 0x74
	.byte	0x6f, 0x72, 0x61, 0x67
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x40, 0x56
	.byte	0x3f, 0x24, 0x65, 0x78
	.byte	0x74, 0x65, 0x6e, 0x74
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x40, 0x24, 0x30
	.byte	0x3f, 0x30, 0x40, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x40, 0x3f, 0x24, 0x73
	.byte	0x70, 0x61, 0x6e, 0x40
	.byte	0x24, 0x24, 0x43, 0x42
	.byte	0x48, 0x24, 0x30, 0x3f
	.byte	0x30, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1079) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1078)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 583
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x78, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x47, 0x02, 0x00, 0x00
	# MemberFuncId (0x107A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: void gsl::span<int,-1>::() (0x101B)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x1b, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: __int64 gsl::span<int,-1>::() (0x1023)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x23, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107C) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1> (0x1003)
	#   FunctionType: int* gsl::span<int,-1>::() (0x1027)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x03, 0x10, 0x00, 0x00
	.byte	0x27, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: void gsl::span<const int,-1>::() (0x105A)
	#   Name: span
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x5a, 0x10, 0x00, 0x00
	.byte	0x73, 0x70, 0x61, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: __int64 gsl::span<const int,-1>::() (0x1060)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x60, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x107F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1> (0x1047)
	#   FunctionType: const int* gsl::span<const int,-1>::() (0x1064)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x47, 0x10, 0x00, 0x00
	.byte	0x64, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1080) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# Pointer (0x1081) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::details::extent_type<0> (0x1080)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1082) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x1080)
	#   ThisType: gsl::details::extent_type<0>* (0x1081)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1083) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<0> (0x1080)
	#   ThisType: gsl::details::extent_type<0>* (0x1081)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (__int64) (0x101F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x81, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x1f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1084) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::() (0x1082)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::details::extent_type<0>::(__int64) (0x1083)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x83, 0x10, 0x00, 0x00
	# Modifier (0x1085) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::details::extent_type<0> (0x1080)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1086) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::details::extent_type<0> (0x1085)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x85, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1087) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: __int64 (0x13)
	#   ClassType: gsl::details::extent_type<0> (0x1080)
	#   ThisType: const gsl::details::extent_type<0>* (0x1086)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x86, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1088) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1084
	#     Name: extent_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: __int64 gsl::details::extent_type<0>::() (0x1087)
	#     Name: size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: index_type
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x84, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x64, 0x65
	.byte	0x78, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Class (0x1089) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1088)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: gsl::details::extent_type<0>
	#   LinkageName: .?AV?$extent_type@$0A@@details@gsl@@
	# }
	.byte	0x56, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0x88, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x64
	.byte	0x65, 0x74, 0x61, 0x69
	.byte	0x6c, 0x73, 0x3a, 0x3a
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x3c
	.byte	0x30, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x65, 0x78, 0x74
	.byte	0x65, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x40, 0x24, 0x30, 0x41
	.byte	0x40, 0x40, 0x64, 0x65
	.byte	0x74, 0x61, 0x69, 0x6c
	.byte	0x73, 0x40, 0x67, 0x73
	.byte	0x6c, 0x40, 0x40, 0x00
	# UdtSourceLine (0x108A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::details::extent_type<0> (0x1089)
	#   SourceFile: C:\projects\gsl\include\gsl\span (0x1036)
	#   LineNumber: 304
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x89, 0x10, 0x00, 0x00
	.byte	0x36, 0x10, 0x00, 0x00
	.byte	0x30, 0x01, 0x00, 0x00
	# MemberFuncId (0x108B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x1080)
	#   FunctionType: void gsl::details::extent_type<0>::() (0x1082)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x82, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# Pointer (0x108C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x108D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: int* (0x674)
	#     ArgType: gsl::details::extent_type<0> (0x1080)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x74, 0x06, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	# MemberFunction (0x108E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   ThisType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x108C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (int*, gsl::details::extent_type<0>) (0x108D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x8c, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x8d, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x108F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   FunctionType: void gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(int*, gsl::details::extent_type<0>) (0x108E)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x8e, 0x10, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1090) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::details::extent_type<0> (0x1080)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	# MemberFunction (0x1091) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   ThisType: gsl::details::extent_type<-1>* (0x103F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::details::extent_type<0>) (0x1090)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x3f, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x90, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1092) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: void gsl::details::extent_type<-1>::(gsl::details::extent_type<0>) (0x1091)
	#   Name: extent_type
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x91, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x74, 0x65
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	# MemberFuncId (0x1093) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<-1> (0x1038)
	#   FunctionType: __int64 gsl::details::extent_type<-1>::() (0x1043)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x38, 0x10, 0x00, 0x00
	.byte	0x43, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1094) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: gsl::details
	# }
	.byte	0x16, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x67, 0x73, 0x6c, 0x3a
	.byte	0x3a, 0x64, 0x65, 0x74
	.byte	0x61, 0x69, 0x6c, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1095) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x1096) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1095)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x1097) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast&& (0x1096)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x96, 0x10, 0x00, 0x00
	# Procedure (0x1098) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: void (0x3)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x1097)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x97, 0x10, 0x00, 0x00
	# VFTableShape (0x1099) {
	#   TypeLeafKind: LF_VTSHAPE (0xA)
	#   VFEntryCount: 2
	# }
	.byte	0x06, 0x00, 0x0a, 0x00
	.byte	0x02, 0x00, 0x55, 0xf1
	# Class (0x109A) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x109B) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1095)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x109C) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char (0x70)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x109D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x109C)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# ArgList (0x109E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	# MemberFunction (0x109F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1095)
	#   ThisType: gsl::fail_fast* (0x109B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x10A0) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::logic_error (0x109A)
	#     BaseOffset: 0x0
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void gsl::fail_fast::(const char* const) (0x109F)
	#     Name: fail_fast
	#   }
	# }
	.byte	0x22, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x9f, 0x10, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Struct (0x10A1) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10A0)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1099)
	#   SizeOf: 24
	#   Name: gsl::fail_fast
	#   LinkageName: .?AUfail_fast@gsl@@
	# }
	.byte	0x3a, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0xa0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x18, 0x00, 0x67, 0x73
	.byte	0x6c, 0x3a, 0x3a, 0x66
	.byte	0x61, 0x69, 0x6c, 0x5f
	.byte	0x66, 0x61, 0x73, 0x74
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x40, 0x67
	.byte	0x73, 0x6c, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x10A2) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\projects\gsl\include\gsl\gsl_assert
	# }
	.byte	0x2e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x70
	.byte	0x72, 0x6f, 0x6a, 0x65
	.byte	0x63, 0x74, 0x73, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5c
	.byte	0x67, 0x73, 0x6c, 0x5f
	.byte	0x61, 0x73, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	# UdtSourceLine (0x10A3) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: gsl::fail_fast (0x10A1)
	#   SourceFile: C:\projects\gsl\include\gsl\gsl_assert (0x10A2)
	#   LineNumber: 97
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xa1, 0x10, 0x00, 0x00
	.byte	0xa2, 0x10, 0x00, 0x00
	.byte	0x61, 0x00, 0x00, 0x00
	# Class (0x10A4) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x10A5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x109A)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Class (0x10A6) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x10A7) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10A8) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A7)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10A9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	# MemberFunction (0x10AA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x109A)
	#   ThisType: std::logic_error* (0x10A5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10AB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x109C)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x10AC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char* (0x10AB)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	# MemberFunction (0x10AD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x109A)
	#   ThisType: std::logic_error* (0x10A5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char*) (0x10AC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xac, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10AE) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10AA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::logic_error::(const char*) (0x10AD)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xaa, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xad, 0x10, 0x00, 0x00
	# FieldList (0x10AF) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::exception (0x10A4)
	#     BaseOffset: 0x0
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10AE
	#     Name: logic_error
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::exception (0x10A4)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x32, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xae, 0x10, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x10B0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 4
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10AF)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1099)
	#   SizeOf: 24
	#   Name: std::logic_error
	#   LinkageName: .?AVlogic_error@std@@
	# }
	.byte	0x3e, 0x00, 0x04, 0x15
	.byte	0x04, 0x00, 0x10, 0x02
	.byte	0xaf, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x18, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x6c
	.byte	0x6f, 0x67, 0x69, 0x63
	.byte	0x5f, 0x65, 0x72, 0x72
	.byte	0x6f, 0x72, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x10B1) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x73, 0x74, 0x64, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x10B2) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::logic_error (0x10B0)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\stdexcept (0x10B1)
	#   LineNumber: 17
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb0, 0x10, 0x00, 0x00
	.byte	0xb1, 0x10, 0x00, 0x00
	.byte	0x11, 0x00, 0x00, 0x00
	# Pointer (0x10B3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: <vftable 2 methods> (0x1099)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Struct (0x10B4) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Pointer (0x10B5) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x10A4)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10B6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A4)
	#   ThisType: std::exception* (0x10B5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10B7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A4)
	#   ThisType: std::exception* (0x10B5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10B8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: int (0x74)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	# MemberFunction (0x10B9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A4)
	#   ThisType: std::exception* (0x10B5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, int) (0x10B8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xb8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x10BA) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::exception (0x10A4)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10BB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x10BA)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xba, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10BC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::exception& (0x10BB)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xbb, 0x10, 0x00, 0x00
	# MemberFunction (0x10BD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::exception (0x10A4)
	#   ThisType: std::exception* (0x10B5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x10BC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xbc, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10BE) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::() (0x10B6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const) (0x10B7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const char* const, int) (0x10B9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::exception::(const std::exception&) (0x10BD)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb9, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbd, 0x10, 0x00, 0x00
	# Pointer (0x10BF) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::exception (0x10A4)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x10C0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::exception& (0x10BF)
	#   ClassType: std::exception (0x10A4)
	#   ThisType: std::exception* (0x10B5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::exception&) (0x10BC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xbf, 0x10, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xb5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xbc, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10C1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::exception (0x10BA)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xba, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10C2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AB)
	#   ClassType: std::exception (0x10A4)
	#   ThisType: const std::exception* (0x10C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xc1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x10C3) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   VFPtr {
	#     TypeLeafKind: LF_VFUNCTAB (0x1409)
	#     Type: <vftable 2 methods>* (0x10B3)
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: __std_exception_data (0x10B4)
	#     FieldOffset: 0x8
	#     Name: _Data
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x10BE
	#     Name: exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::exception& std::exception::(const std::exception&) (0x10C0)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: void std::exception::() (0x10B6)
	#     VFTableOffset: 0x0
	#     Name: ~exception
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: IntroducingVirtual (0x4)
	#     Type: const char* std::exception::() (0x10C2)
	#     VFTableOffset: 0x8
	#     Name: what
	#   }
	# }
	.byte	0x6e, 0x00, 0x03, 0x12
	.byte	0x09, 0x14, 0x00, 0x00
	.byte	0xb3, 0x10, 0x00, 0x00
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0xb4, 0x10, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x44
	.byte	0x61, 0x74, 0x61, 0x00
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0xbe, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc0, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0xb6, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x13, 0x00
	.byte	0xc2, 0x10, 0x00, 0x00
	.byte	0x08, 0x00, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x10C4) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 9
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x10C3)
	#   DerivedFrom: 0x0
	#   VShape: <vftable 2 methods> (0x1099)
	#   SizeOf: 24
	#   Name: std::exception
	#   LinkageName: .?AVexception@std@@
	# }
	.byte	0x3a, 0x00, 0x04, 0x15
	.byte	0x09, 0x00, 0x00, 0x02
	.byte	0xc3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x99, 0x10, 0x00, 0x00
	.byte	0x18, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x65
	.byte	0x78, 0x63, 0x65, 0x70
	.byte	0x74, 0x69, 0x6f, 0x6e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x56, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x10C5) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h
	# }
	.byte	0x7e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x76, 0x63, 0x72, 0x75
	.byte	0x6e, 0x74, 0x69, 0x6d
	.byte	0x65, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x2e
	.byte	0x68, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x10C6) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::exception (0x10C4)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h (0x10C5)
	#   LineNumber: 44
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xc4, 0x10, 0x00, 0x00
	.byte	0xc5, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x00, 0x00
	# Class (0x10C7) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	#   LinkageName: .?AV?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x10C8) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: unsigned __int64 (0x23)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10C9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x10CA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10CB) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Modifier (0x10CC) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<char> (0x10CB)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x10CD) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x10CC)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xcc, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x10CE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10CF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x10CE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xce, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10D0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D1) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10D2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10D4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const std::allocator<char>&) (0x10D3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xd3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10D6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64, const std::allocator<char>&) (0x10D5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xd5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x10D8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x10D7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10D9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10DA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const std::allocator<char>&) (0x10D9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xd9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10DB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10DC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10DD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const std::allocator<char>&) (0x10DC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xdc, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10DE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x10DF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char) (0x10DE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xde, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10E0) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char (0x109C)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10E1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const char, const std::allocator<char>&) (0x10E0)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xe0, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x10E2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x10E3) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x10E2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	# MemberFunction (0x10E4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10E3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10E5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x10E2)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10E6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x10E5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x10E7) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::initializer_list<char>
	#   LinkageName: .?AV?$initializer_list@D@std@@
	# }
	.byte	0x52, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x69, 0x74, 0x69
	.byte	0x61, 0x6c, 0x69, 0x7a
	.byte	0x65, 0x72, 0x5f, 0x6c
	.byte	0x69, 0x73, 0x74, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x69, 0x6e, 0x69, 0x74
	.byte	0x69, 0x61, 0x6c, 0x69
	.byte	0x7a, 0x65, 0x72, 0x5f
	.byte	0x6c, 0x69, 0x73, 0x74
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x10E8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x10E7)
	#     ArgType: const std::allocator<char>& (0x10CD)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe7, 0x10, 0x00, 0x00
	.byte	0xcd, 0x10, 0x00, 0x00
	# MemberFunction (0x10E9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::initializer_list<char>, const std::allocator<char>&) (0x10E8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xe8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10EA) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10CA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const std::allocator<char>&) (0x10CF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::allocator<char>&) (0x10D2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const std::allocator<char>&) (0x10D4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64, const std::allocator<char>&) (0x10D6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x10D8)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const std::allocator<char>&) (0x10DA)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x10DB)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const std::allocator<char>&) (0x10DD)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x10DF)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char, const std::allocator<char>&) (0x10E1)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10E4)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, const std::allocator<char>&) (0x10E6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>, const std::allocator<char>&) (0x10E9)
	#   ]
	# }
	.byte	0x7a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcf, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd2, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd4, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xd8, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xda, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdb, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdd, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xdf, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe1, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe4, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe9, 0x10, 0x00, 0x00
	# Pointer (0x10EB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# Struct (0x10EC) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::random_access_iterator_tag
	#   LinkageName: .?AUrandom_access_iterator_tag@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x61, 0x6e, 0x64, 0x6f
	.byte	0x6d, 0x5f, 0x61, 0x63
	.byte	0x63, 0x65, 0x73, 0x73
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x61
	.byte	0x67, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x55, 0x72, 0x61
	.byte	0x6e, 0x64, 0x6f, 0x6d
	.byte	0x5f, 0x61, 0x63, 0x63
	.byte	0x65, 0x73, 0x73, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x61, 0x67
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# ArgList (0x10ED) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EB)
	#     ArgType: char* const (0x10EB)
	#     ArgType: std::random_access_iterator_tag (0x10EC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0xec, 0x10, 0x00, 0x00
	# MemberFunction (0x10EE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, char* const, std::random_access_iterator_tag) (0x10ED)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xed, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10EF) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: const char* const (0x109D)
	#     ArgType: std::random_access_iterator_tag (0x10EC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xec, 0x10, 0x00, 0x00
	# MemberFunction (0x10F0) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, std::random_access_iterator_tag) (0x10EF)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xef, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10F1) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, char* const, std::random_access_iterator_tag) (0x10EE)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const char* const, std::random_access_iterator_tag) (0x10F0)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xee, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf0, 0x10, 0x00, 0x00
	# Pointer (0x10F2) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x10F3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10E3)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xe3, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10F4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::initializer_list<char> (0x10E7)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xe7, 0x10, 0x00, 0x00
	# MemberFunction (0x10F5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::initializer_list<char>) (0x10F4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf4, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10F6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10F7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x10F8) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x10F9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x10F8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10FA) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10F3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10F5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10F6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x10F7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x10F9)
	#   ]
	# }
	.byte	0x2a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf9, 0x10, 0x00, 0x00
	# ArgList (0x10FB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x10FC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x10FB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xfb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10FD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x10D7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x10FE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char) (0x10DE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xde, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x10FF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&) (0x10F3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10F5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10F6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x10FC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x10FD)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x10F7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x10FE)
	#   ]
	# }
	.byte	0x3a, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf3, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfd, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x10, 0x00, 0x00
	# Struct (0x1100) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# ArgList (0x1101) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x10E2)
	#     ArgType: std::integral_constant<bool,1> (0x1100)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	# MemberFunction (0x1102) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,1>) (0x1101)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x01, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1103) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# ArgList (0x1104) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >&& (0x10E2)
	#     ArgType: std::integral_constant<bool,0> (0x1103)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xe2, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	# MemberFunction (0x1105) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,0>) (0x1104)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x04, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1106) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,1>) (0x1102)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&&, std::integral_constant<bool,0>) (0x1105)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x02, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x05, 0x11, 0x00, 0x00
	# ArgList (0x1107) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char (0x70)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	# MemberFunction (0x1108) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char) (0x1107)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x07, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1109) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10F5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10F6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x10F7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char) (0x1108)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x08, 0x11, 0x00, 0x00
	# MethodOverloadList (0x110A) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::initializer_list<char>) (0x10F5)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10F6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x10FC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x10FD)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x10F7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x10FE)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf5, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf6, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfc, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfd, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xf7, 0x10, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xfe, 0x10, 0x00, 0x00
	# Class (0x110B) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xa6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x110C) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
	#   LinkageName: .?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@
	# }
	.byte	0xb2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x73, 0x74
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Modifier (0x110D) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110C)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x0c, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Modifier (0x110E) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::initializer_list<char> (0x10E7)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xe7, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x110F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::initializer_list<char> (0x110E)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0e, 0x11, 0x00, 0x00
	# MemberFunction (0x1110) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x110F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x0f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1111) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	# MemberFunction (0x1112) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1111)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x11, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1113) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1114) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1113)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x13, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1115) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1116) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const char* const, const unsigned __int64) (0x1115)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x15, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1117) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char* const (0x109D)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	# MemberFunction (0x1118) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const char* const) (0x1117)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x17, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1119) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x111A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char) (0x1119)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x19, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x111B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x111C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x111B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x1b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x111D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x111E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x111D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x1d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x111F) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1110)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1112)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1114)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char* const, const unsigned __int64) (0x1116)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char* const) (0x1118)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char) (0x111A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char) (0x111C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x111E)
	#   ]
	# }
	.byte	0x42, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x10, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x12, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x16, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x18, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1c, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1e, 0x11, 0x00, 0x00
	# ArgList (0x1120) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::initializer_list<char> (0x110E)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0e, 0x11, 0x00, 0x00
	# MemberFunction (0x1121) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1120)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x20, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1122) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	# MemberFunction (0x1123) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1122)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x22, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1124) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1125) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1124)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x05, 0x00
	.byte	0x24, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1126) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1127) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, unsigned __int64, const char* const, const unsigned __int64) (0x1126)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x26, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1128) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char* const (0x109D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	# MemberFunction (0x1129) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const) (0x1128)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x28, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x112A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x112B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, unsigned __int64, const unsigned __int64, const char) (0x112A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x2a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x112C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	# MemberFunction (0x112D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x112C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x2c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x112E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x112F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned __int64) (0x112E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x2e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1130) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const char* const (0x109D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	# MemberFunction (0x1131) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x1130)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x30, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1132) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x1133) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x1132)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x32, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1134) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::initializer_list<char>) (0x1121)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1123)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, unsigned __int64) (0x1125)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const char* const, const unsigned __int64) (0x1127)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const) (0x1129)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64, const unsigned __int64, const char) (0x112B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x112D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const, const unsigned __int64) (0x112F)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const char* const) (0x1131)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const unsigned __int64, const char) (0x1133)
	#   ]
	# }
	.byte	0x52, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x21, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x23, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x25, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x27, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x29, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2d, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x2f, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x31, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x33, 0x11, 0x00, 0x00
	# ArgList (0x1135) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1136) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1137) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1138) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, unsigned __int64) (0x1137)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x37, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1139) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	# MemberFunction (0x113A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x1139)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x39, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x113B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#     ArgType: const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110D)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	.byte	0x0d, 0x11, 0x00, 0x00
	# MemberFunction (0x113C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x113B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x3b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x113D) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x1136)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, unsigned __int64) (0x1138)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x113A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, const std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >) (0x113C)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x36, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x38, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3c, 0x11, 0x00, 0x00
	# MemberFunction (0x113E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x113F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A7)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xa7, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1140) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110C)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x0c, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1141) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x113E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1140)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x40, 0x11, 0x00, 0x00
	# MemberFunction (0x1142) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1143) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AB)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1144) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1142)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1143)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x42, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x43, 0x11, 0x00, 0x00
	# Class (0x1145) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xd6, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x69, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1146) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1145)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1147) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > >
	#   LinkageName: .?AV?$reverse_iterator@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@
	# }
	.byte	0xe2, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x72
	.byte	0x65, 0x76, 0x65, 0x72
	.byte	0x73, 0x65, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x5f, 0x69
	.byte	0x74, 0x65, 0x72, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x20
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x73, 0x74, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# MemberFunction (0x1148) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1147)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1149) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1146)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1148)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x46, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x11, 0x00, 0x00
	# Pointer (0x114A) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: char (0x70)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x114B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x114A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x114C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const char (0x109C)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x114D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x114C)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x114E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x114B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x114D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4d, 0x11, 0x00, 0x00
	# MemberFunction (0x114F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char) (0x10F8)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xf8, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1150) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char& (0x114A)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1151) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char& (0x114C)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1152) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1150)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char& std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1151)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x50, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x51, 0x11, 0x00, 0x00
	# MemberFunction (0x1153) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1154) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1155) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1156) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EB)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1157) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, unsigned __int64, const unsigned __int64) (0x1156)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x56, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1158) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x10EB)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1159) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned __int64, unsigned __int64, const unsigned __int64) (0x1158)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x58, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x115A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#     ArgType: std::integral_constant<bool,1> (0x1100)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	# MemberFunction (0x115B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x115A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x5a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x115C) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#     ArgType: std::integral_constant<bool,0> (0x1103)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	# MemberFunction (0x115D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x115C)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x5c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x115E) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,1>) (0x115B)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, std::integral_constant<bool,0>) (0x115D)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5b, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5d, 0x11, 0x00, 0x00
	# Class (0x115F) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1160) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1161) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x1160)
	#     ArgType: std::_String_val<std::_Simple_types<char> >& (0x1160)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x60, 0x11, 0x00, 0x00
	.byte	0x60, 0x11, 0x00, 0x00
	# MemberFunction (0x1162) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x1161)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x61, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1163) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10F2)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xf2, 0x10, 0x00, 0x00
	# MemberFunction (0x1164) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x10C9)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1163)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xc9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x63, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1165) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1166) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x1165)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x65, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1167) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1168) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const unsigned __int64) (0x1167)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x67, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1169) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, const unsigned __int64) (0x10D7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xd7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x116A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char (0x109C)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x116B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char, const unsigned __int64) (0x116A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x6a, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x116C) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x1166)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x1168)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x1169)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x116B)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x66, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x11, 0x00, 0x00
	# ArgList (0x116D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x116E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned __int64) (0x116D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x6d, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x116F) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, unsigned __int64) (0x116E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x1168)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64) (0x1169)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x116B)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x69, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x11, 0x00, 0x00
	# ArgList (0x1170) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: unsigned __int64 (0x23)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	# MemberFunction (0x1171) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char* const, unsigned __int64) (0x1170)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x70, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1172) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64) (0x1166)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, const unsigned __int64, const unsigned __int64) (0x1168)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const, unsigned __int64) (0x1171)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char, const unsigned __int64) (0x116B)
	#   ]
	# }
	.byte	0x22, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x66, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x68, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x71, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x6b, 0x11, 0x00, 0x00
	# ArgList (0x1173) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1174) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const unsigned __int64) (0x1173)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x73, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1175) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1176) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1177) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1175)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x1176)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x75, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x76, 0x11, 0x00, 0x00
	# MemberFunction (0x1178) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10A9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa9, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1179) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: unsigned __int64 (0x23)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	# MemberFunction (0x117A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1179)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x79, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x117B) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 5
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >& (0x10A8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x1a, 0x00, 0x01, 0x12
	.byte	0x05, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xa8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x117C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 5
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64) (0x117B)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x05, 0x00
	.byte	0x7b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x117D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x117E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const) (0x1128)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x28, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x117F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1180) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (const unsigned __int64, const unsigned __int64, const char* const, const unsigned __int64) (0x117F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0x7f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1181) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1178)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(unsigned __int64, unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x117A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&, const unsigned __int64, const unsigned __int64) (0x117C)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char* const) (0x117D)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const) (0x117E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: int std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64, const char* const, const unsigned __int64) (0x1180)
	#   ]
	# }
	.byte	0x32, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x78, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7a, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7c, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7d, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x80, 0x11, 0x00, 0x00
	# MemberFunction (0x1182) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x10CB)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1183) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: const std::basic_string<char,std::char_traits<char>,std::allocator<char> >* (0x113F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x3f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1184) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x10A6)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1185) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Struct (0x1186) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# FieldList (0x1187) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#     BaseOffset: 0x0
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x10C8)
	#     Name: _Memcpy_move_offset
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x10C8)
	#     Name: _Memcpy_move_size
	#   }
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const unsigned __int64 (0x10C8)
	#     Name: npos
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xF
	#     MethodListIndex: 0x10EA
	#     Name: basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x10F1
	#     Name: _Construct
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x5
	#     MethodListIndex: 0x10FA
	#     Name: operator=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x7
	#     MethodListIndex: 0x10FF
	#     Name: assign
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1106
	#     Name: _Assign_rv_contents
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1106
	#     Name: _Assign_rv_contents_with_alloc_always_equal
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x10CA)
	#     Name: _Construct_lv_contents
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1109
	#     Name: operator+=
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x110A
	#     Name: append
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x8
	#     MethodListIndex: 0x111F
	#     Name: insert
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0xA
	#     MethodListIndex: 0x1134
	#     Name: replace
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#     Name: ~basic_string
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x113D
	#     Name: erase
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#     Name: clear
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1141
	#     Name: begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1141
	#     Name: end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1144
	#     Name: _Unchecked_begin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1144
	#     Name: _Unchecked_end
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1149
	#     Name: rbegin
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1149
	#     Name: rend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1140)
	#     Name: cbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1140)
	#     Name: cend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1148)
	#     Name: crbegin
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1148)
	#     Name: crend
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#     Name: shrink_to_fit
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x114E
	#     Name: at
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x114E
	#     Name: operator[]
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const char) (0x114F)
	#     Name: push_back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#     Name: pop_back
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1152
	#     Name: front
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1152
	#     Name: back
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1143)
	#     Name: c_str
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1143)
	#     Name: data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1153)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1153)
	#     Name: size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1153)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const char) (0x10DF)
	#     Name: resize
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1153)
	#     Name: capacity
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x1154)
	#     Name: reserve
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1155)
	#     Name: empty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, unsigned __int64, const unsigned __int64) (0x1157)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(char* const, const unsigned __int64, unsigned __int64, const unsigned __int64) (0x1159)
	#     Name: _Copy_s
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x115E
	#     Name: _Swap_data
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::_String_val<std::_Simple_types<char> >&, std::_String_val<std::_Simple_types<char> >&) (0x1162)
	#     Name: _Swap_bx_large_with_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(std::basic_string<char,std::char_traits<char>,std::allocator<char> >&) (0x1164)
	#     Name: swap
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116C
	#     Name: find
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116C
	#     Name: rfind
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116C
	#     Name: find_first_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116F
	#     Name: find_last_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x1172
	#     Name: find_first_not_of
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x4
	#     MethodListIndex: 0x116C
	#     Name: find_last_not_of
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::basic_string<char,std::char_traits<char>,std::allocator<char> > std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64, const unsigned __int64) (0x1174)
	#     Name: substr
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1177
	#     Name: _Equal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x6
	#     MethodListIndex: 0x1181
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char> std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1182)
	#     Name: get_allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x1183)
	#     Name: _Calculate_growth
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#     Name: _Become_small
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::(const unsigned __int64) (0x1154)
	#     Name: _Eos
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#     Name: _Tidy_init
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x10D0)
	#     Name: _Tidy_deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::basic_string<char,std::char_traits<char>,std::allocator<char> >::() (0x1184)
	#     Name: _Xlen
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#     Name: _Mybase
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::char_traits<char> (0x1185)
	#     Name: traits_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CB)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CB)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<char> > (0x1186)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x115F)
	#     Name: _Mydata_t
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AB)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x114A)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x114C)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110C)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1145)
	#     Name: reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::reverse_iterator<std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > > (0x1147)
	#     Name: const_reverse_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: _Use_memcpy_move
	#   }
	# }
	.byte	0xa6, 0x06, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x6f, 0x66, 0x66
	.byte	0x73, 0x65, 0x74, 0x00
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x5f, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x6e, 0x70, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x0f, 0x00
	.byte	0xea, 0x10, 0x00, 0x00
	.byte	0x62, 0x61, 0x73, 0x69
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xf1, 0x10, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x05, 0x00
	.byte	0xfa, 0x10, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x07, 0x00
	.byte	0xff, 0x10, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x73, 0x73
	.byte	0x69, 0x67, 0x6e, 0x5f
	.byte	0x72, 0x76, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x74, 0x65
	.byte	0x6e, 0x74, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x06, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x73, 0x73
	.byte	0x69, 0x67, 0x6e, 0x5f
	.byte	0x72, 0x76, 0x5f, 0x63
	.byte	0x6f, 0x6e, 0x74, 0x65
	.byte	0x6e, 0x74, 0x73, 0x5f
	.byte	0x77, 0x69, 0x74, 0x68
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xca, 0x10, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x5f, 0x6c
	.byte	0x76, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x65, 0x6e
	.byte	0x74, 0x73, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x09, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x2b, 0x3d, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x0a, 0x11, 0x00, 0x00
	.byte	0x61, 0x70, 0x70, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x08, 0x00
	.byte	0x1f, 0x11, 0x00, 0x00
	.byte	0x69, 0x6e, 0x73, 0x65
	.byte	0x72, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x0a, 0x00
	.byte	0x34, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x70, 0x6c
	.byte	0x61, 0x63, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x7e, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x3d, 0x11, 0x00, 0x00
	.byte	0x65, 0x72, 0x61, 0x73
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x63, 0x6c, 0x65, 0x61
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x41, 0x11, 0x00, 0x00
	.byte	0x62, 0x65, 0x67, 0x69
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x41, 0x11, 0x00, 0x00
	.byte	0x65, 0x6e, 0x64, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x62
	.byte	0x65, 0x67, 0x69, 0x6e
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x44, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x63
	.byte	0x68, 0x65, 0x63, 0x6b
	.byte	0x65, 0x64, 0x5f, 0x65
	.byte	0x6e, 0x64, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x72, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x49, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x40, 0x11, 0x00, 0x00
	.byte	0x63, 0x62, 0x65, 0x67
	.byte	0x69, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x40, 0x11, 0x00, 0x00
	.byte	0x63, 0x65, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x48, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x62, 0x65
	.byte	0x67, 0x69, 0x6e, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x48, 0x11, 0x00, 0x00
	.byte	0x63, 0x72, 0x65, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x73, 0x68, 0x72, 0x69
	.byte	0x6e, 0x6b, 0x5f, 0x74
	.byte	0x6f, 0x5f, 0x66, 0x69
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x4e, 0x11, 0x00, 0x00
	.byte	0x61, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x4e, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5b, 0x5d, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4f, 0x11, 0x00, 0x00
	.byte	0x70, 0x75, 0x73, 0x68
	.byte	0x5f, 0x62, 0x61, 0x63
	.byte	0x6b, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x70, 0x6f, 0x70, 0x5f
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x66, 0x72, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x52, 0x11, 0x00, 0x00
	.byte	0x62, 0x61, 0x63, 0x6b
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x43, 0x11, 0x00, 0x00
	.byte	0x63, 0x5f, 0x73, 0x74
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x43, 0x11, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x53, 0x11, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x53, 0x11, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x53, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdf, 0x10, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x53, 0x11, 0x00, 0x00
	.byte	0x63, 0x61, 0x70, 0x61
	.byte	0x63, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x73, 0x65
	.byte	0x72, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x55, 0x11, 0x00, 0x00
	.byte	0x65, 0x6d, 0x70, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x57, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x59, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x5e, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x62, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x62, 0x78
	.byte	0x5f, 0x6c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x77
	.byte	0x69, 0x74, 0x68, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x11, 0x00, 0x00
	.byte	0x73, 0x77, 0x61, 0x70
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6c, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6c, 0x11, 0x00, 0x00
	.byte	0x72, 0x66, 0x69, 0x6e
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6c, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6f, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x72, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x5f, 0x6e
	.byte	0x6f, 0x74, 0x5f, 0x6f
	.byte	0x66, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x04, 0x00
	.byte	0x6c, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x5f, 0x6c, 0x61, 0x73
	.byte	0x74, 0x5f, 0x6e, 0x6f
	.byte	0x74, 0x5f, 0x6f, 0x66
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x74, 0x11, 0x00, 0x00
	.byte	0x73, 0x75, 0x62, 0x73
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x77, 0x11, 0x00, 0x00
	.byte	0x5f, 0x45, 0x71, 0x75
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x06, 0x00
	.byte	0x81, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x82, 0x11, 0x00, 0x00
	.byte	0x67, 0x65, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x83, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x61, 0x6c
	.byte	0x63, 0x75, 0x6c, 0x61
	.byte	0x74, 0x65, 0x5f, 0x67
	.byte	0x72, 0x6f, 0x77, 0x74
	.byte	0x68, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x5f, 0x42, 0x65, 0x63
	.byte	0x6f, 0x6d, 0x65, 0x5f
	.byte	0x73, 0x6d, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x54, 0x11, 0x00, 0x00
	.byte	0x5f, 0x45, 0x6f, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x69, 0x6e
	.byte	0x69, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd0, 0x10, 0x00, 0x00
	.byte	0x5f, 0x54, 0x69, 0x64
	.byte	0x79, 0x5f, 0x64, 0x65
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x84, 0x11, 0x00, 0x00
	.byte	0x5f, 0x58, 0x6c, 0x65
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x64
	.byte	0x61, 0x74, 0x61, 0x5f
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x45, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x76, 0x65
	.byte	0x72, 0x73, 0x65, 0x5f
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x47, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x76, 0x65, 0x72, 0x73
	.byte	0x65, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x73, 0x65
	.byte	0x5f, 0x6d, 0x65, 0x6d
	.byte	0x63, 0x70, 0x79, 0x5f
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x1188) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 172
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1187)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::basic_string<char,std::char_traits<char>,std::allocator<char> >
	#   LinkageName: .?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@
	# }
	.byte	0x9e, 0x00, 0x04, 0x15
	.byte	0xac, 0x00, 0x10, 0x02
	.byte	0x87, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x62
	.byte	0x61, 0x73, 0x69, 0x63
	.byte	0x5f, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x62, 0x61, 0x73
	.byte	0x69, 0x63, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x40, 0x44, 0x55
	.byte	0x3f, 0x24, 0x63, 0x68
	.byte	0x61, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x32, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x1189) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x73, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x00
	# UdtSourceLine (0x118A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::basic_string<char,std::char_traits<char>,std::allocator<char> > (0x1188)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 2064
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x88, 0x11, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x10, 0x08, 0x00, 0x00
	# FieldList (0x118B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* (0x10AB)
	#     FieldOffset: 0x0
	#     Name: _What
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool (0x30)
	#     FieldOffset: 0x8
	#     Name: _DoFree
	#   }
	# }
	.byte	0x26, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x68, 0x61, 0x74, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x44
	.byte	0x6f, 0x46, 0x72, 0x65
	.byte	0x65, 0x00, 0xf2, 0xf1
	# Struct (0x118C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 2
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x118B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: __std_exception_data
	#   LinkageName: .?AU__std_exception_data@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x02, 0x00, 0x00, 0x02
	.byte	0x8b, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x5f, 0x5f
	.byte	0x73, 0x74, 0x64, 0x5f
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x5f, 0x64, 0x61
	.byte	0x74, 0x61, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x5f
	.byte	0x5f, 0x73, 0x74, 0x64
	.byte	0x5f, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x5f, 0x64
	.byte	0x61, 0x74, 0x61, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x118D) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: __std_exception_data (0x118C)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\vcruntime_exception.h (0x10C5)
	#   LineNumber: 21
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x8c, 0x11, 0x00, 0x00
	.byte	0xc5, 0x10, 0x00, 0x00
	.byte	0x15, 0x00, 0x00, 0x00
	# Class (0x118E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x118F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1190) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x118F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1191) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x118F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1192) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x10CB)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1193) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x1192)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	# MemberFunction (0x1194) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x118F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::allocator<char>&) (0x1193)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x93, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x1195) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x1196) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x1195)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x1197) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12* (0x1196)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Modifier (0x1198) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1199) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x1198)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x98, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x119A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1197)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1199)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x97, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Struct (0x119B) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Pointer (0x119C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x119B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x119D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* (0x119C)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x119E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy*& (0x119D)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x118F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9d, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x119F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x119B)
	#   PointerAttributes: 0x1040C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 1
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x0c, 0x04, 0x01, 0x00
	# Pointer (0x11A0) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy* const (0x119F)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9f, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x11A1) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* const& (0x11A0)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1199)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xa0, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11A2) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy*& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x119E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* const& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x11A1)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9e, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa1, 0x11, 0x00, 0x00
	# Pointer (0x11A3) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x11A4) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >& (0x11A3)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa3, 0x11, 0x00, 0x00
	# MemberFunction (0x11A5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x118F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >&) (0x11A4)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11A6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x1192)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x118F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11A7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x10CD)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1199)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xcd, 0x10, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11A8) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char>& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x11A6)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<char>& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x11A7)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa6, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa7, 0x11, 0x00, 0x00
	# MemberFunction (0x11A9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x1160)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x118F)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x60, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x8f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11AA) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11AB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x11AA)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xaa, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x11AC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x11AB)
	#   ClassType: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x10C7)
	#   ThisType: const std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >* (0x1199)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xab, 0x11, 0x00, 0x00
	.byte	0xc7, 0x10, 0x00, 0x00
	.byte	0x99, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11AD) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x11A9)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x11AC)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xa9, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xac, 0x11, 0x00, 0x00
	# Class (0x11AE) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator<std::_Container_proxy>
	#   LinkageName: .?AV?$allocator@U_Container_proxy@std@@@std@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x43
	.byte	0x6f, 0x6e, 0x74, 0x61
	.byte	0x69, 0x6e, 0x65, 0x72
	.byte	0x5f, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# Struct (0x11AF) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0x9a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# Struct (0x11B0) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Simple_types<char>
	#   LinkageName: .?AU?$_Simple_types@D@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# Union (0x11B1) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 0
	#   Properties [ (0x288)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   FieldList: 0x0
	#   SizeOf: 0
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x00, 0x00, 0x88, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# FieldList (0x11B2) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 16
	#     Name: _BUF_SIZE
	#   }
	# }
	.byte	0x12, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x10, 0x00, 0x5f, 0x42
	.byte	0x55, 0x46, 0x5f, 0x53
	.byte	0x49, 0x5a, 0x45, 0x00
	# Enum (0x11B3) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x11B2)
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_BUF_SIZE>@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xce, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xb2, 0x11, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x3a, 0x3a, 0x3c, 0x75
	.byte	0x6e, 0x6e, 0x61, 0x6d
	.byte	0x65, 0x64, 0x2d, 0x74
	.byte	0x61, 0x67, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x57
	.byte	0x34, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x65, 0x6e
	.byte	0x75, 0x6d, 0x2d, 0x5f
	.byte	0x42, 0x55, 0x46, 0x5f
	.byte	0x53, 0x49, 0x5a, 0x45
	.byte	0x3e, 0x40, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x44, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11B4) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x11B3)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 1897
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x69, 0x07, 0x00, 0x00
	# FieldList (0x11B5) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   Enumerator {
	#     TypeLeafKind: LF_ENUMERATE (0x1502)
	#     AccessSpecifier: Public (0x3)
	#     EnumValue: 15
	#     Name: _ALLOC_MASK
	#   }
	# }
	.byte	0x16, 0x00, 0x03, 0x12
	.byte	0x02, 0x15, 0x03, 0x00
	.byte	0x0f, 0x00, 0x5f, 0x41
	.byte	0x4c, 0x4c, 0x4f, 0x43
	.byte	0x5f, 0x4d, 0x41, 0x53
	.byte	0x4b, 0x00, 0xf2, 0xf1
	# Enum (0x11B6) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x11B5)
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_ALLOC_MASK>@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xce, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xb5, 0x11, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x2c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x20, 0x3e
	.byte	0x3a, 0x3a, 0x3c, 0x75
	.byte	0x6e, 0x6e, 0x61, 0x6d
	.byte	0x65, 0x64, 0x2d, 0x74
	.byte	0x61, 0x67, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x57
	.byte	0x34, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x65, 0x6e
	.byte	0x75, 0x6d, 0x2d, 0x5f
	.byte	0x41, 0x4c, 0x4c, 0x4f
	.byte	0x43, 0x5f, 0x4d, 0x41
	.byte	0x53, 0x4b, 0x3e, 0x40
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x11B7) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x11B6)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 1902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb6, 0x11, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x6e, 0x07, 0x00, 0x00
	# FieldList (0x11B8) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x118E)
	#     FieldOffset: 0x0
	#     Name: _Mypair
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1190)
	#     Name: _String_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1190)
	#     Name: ~_String_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(const std::allocator<char>&) (0x1191)
	#     Name: _Copy_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(std::allocator<char>&) (0x1194)
	#     Name: _Move_alloc
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1190)
	#     Name: _Alloc_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1190)
	#     Name: _Free_proxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x119A)
	#     Name: _Getpfirst
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11A2
	#     Name: _Myproxy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::() (0x1190)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::(std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >&) (0x11A5)
	#     Name: _Swap_all
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11A8
	#     Name: _Getal
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11AD
	#     Name: _Get_data
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CB)
	#     Name: _Alty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<char> > (0x1186)
	#     Name: _Alty_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<std::_Container_proxy> (0x11AE)
	#     Name: _Alproxy
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator_traits<std::allocator<std::_Container_proxy> > (0x11AF)
	#     Name: _Alproxy_traits
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Simple_types<char> (0x11B0)
	#     Name: _Val_types
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x115F)
	#     Name: _Mydata_t
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11B1)
	#     Name: _Bxty
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AB)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x114A)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x114C)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_iterator<std::_String_val<std::_Simple_types<char> > > (0x110B)
	#     Name: iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > (0x110C)
	#     Name: const_iterator
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x11B3)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::<unnamed-tag> (0x11B6)
	#     Name: 
	#   }
	# }
	.byte	0x72, 0x02, 0x03, 0x12
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x61, 0x69
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x90, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x90, 0x11, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x91, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x94, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x6f, 0x76
	.byte	0x65, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x90, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x90, 0x11, 0x00, 0x00
	.byte	0x5f, 0x46, 0x72, 0x65
	.byte	0x65, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x9a, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa2, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x90, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xa5, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xa8, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x61, 0x6c, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xad, 0x11, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x64, 0x61, 0x74
	.byte	0x61, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x86, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x74
	.byte	0x79, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xaf, 0x11, 0x00, 0x00
	.byte	0x5f, 0x41, 0x6c, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb0, 0x11, 0x00, 0x00
	.byte	0x5f, 0x56, 0x61, 0x6c
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x64
	.byte	0x61, 0x74, 0x61, 0x5f
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0b, 0x11, 0x00, 0x00
	.byte	0x69, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x69, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb3, 0x11, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb6, 0x11, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Class (0x11B9) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 34
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11B8)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	#   LinkageName: .?AV?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@
	# }
	.byte	0xaa, 0x00, 0x04, 0x15
	.byte	0x22, 0x00, 0x10, 0x02
	.byte	0xb8, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x2c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x11BA) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_alloc<std::_String_base_types<char,std::allocator<char> > > (0x11B9)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 1875
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xb9, 0x11, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x53, 0x07, 0x00, 0x00
	# Pointer (0x11BB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<char> (0x10CC)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xcc, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x11BC) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: char& (0x114A)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	# MemberFunction (0x11BD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: const std::allocator<char>* (0x11BB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (char&) (0x11BC)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xbb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xbc, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11BE) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const char& (0x114C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	# MemberFunction (0x11BF) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AB)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: const std::allocator<char>* (0x11BB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x11BE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xbb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xbe, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11C0) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(char&) (0x11BD)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::allocator<char>::(const char&) (0x11BF)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbd, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xbf, 0x11, 0x00, 0x00
	# Pointer (0x11C1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<char> (0x10CB)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11C2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: std::allocator<char>* (0x11C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11C3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: std::allocator<char>* (0x11C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11C4) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::() (0x11C2)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(const std::allocator<char>&) (0x11C3)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc2, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc3, 0x11, 0x00, 0x00
	# ArgList (0x11C5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char* const (0x10EB)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x11C6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: std::allocator<char>* (0x11C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char* const, const unsigned __int64) (0x11C5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xc5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11C7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: std::allocator<char>* (0x11C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x11C8) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: void (0x3)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11C9) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const void (0x11C8)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xc8, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x11CA) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const void* (0x11C9)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	# MemberFunction (0x11CB) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: std::allocator<char>* (0x11C1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const void*) (0x11CA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xc1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xca, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11CC) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned __int64) (0x11C7)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::allocator<char>::(const unsigned __int64, const void*) (0x11CB)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xc7, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xcb, 0x11, 0x00, 0x00
	# MemberFunction (0x11CD) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::allocator<char> (0x10CB)
	#   ThisType: const std::allocator<char>* (0x11BB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0xbb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11CE) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11C0
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11C4
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<char>::(char* const, const unsigned __int64) (0x11C6)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11CC
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::allocator<char>::() (0x11CD)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AB)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x114A)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x114C)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xc0, 0x11, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xc4, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xc6, 0x11, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xcc, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xcd, 0x11, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x11CF) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11CE)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<char>
	#   LinkageName: .?AV?$allocator@D@std@@
	# }
	.byte	0x42, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0xce, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x11D0) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x6d, 0x65, 0x6d
	.byte	0x6f, 0x72, 0x79, 0x30
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x11D1) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<char> (0x11CF)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x11D0)
	#   LineNumber: 940
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xcf, 0x11, 0x00, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0xac, 0x03, 0x00, 0x00
	# Modifier (0x11D2) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: bool (0x30)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Modifier (0x11D3) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,1> (0x1100)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11D4) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,1> (0x11D3)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xd3, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11D5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,1> (0x1100)
	#   ThisType: const std::integral_constant<bool,1>* (0x11D4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0xd4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11D6) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x11D2)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x11D5)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,1>::() (0x11D5)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xd2, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd5, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xd5, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x11D7) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11D6)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,1>
	#   LinkageName: .?AU?$integral_constant@_N$00@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0xd6, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x31, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x30, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x11D8) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x74, 0x72, 0x31
	.byte	0x63, 0x6f, 0x6d, 0x6d
	.byte	0x6f, 0x6e, 0x00, 0xf1
	# UdtSourceLine (0x11D9) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,1> (0x11D7)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common (0x11D8)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xd7, 0x11, 0x00, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Modifier (0x11DA) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::integral_constant<bool,0> (0x1103)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x11DB) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::integral_constant<bool,0> (0x11DA)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xda, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11DC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::integral_constant<bool,0> (0x1103)
	#   ThisType: const std::integral_constant<bool,0>* (0x11DB)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0xdb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x11DD) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x11D2)
	#     Name: value
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x11DC)
	#     Name: operator bool
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::integral_constant<bool,0>::() (0x11DC)
	#     Name: operator()
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: bool (0x30)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x1103)
	#     Name: type
	#   }
	# }
	.byte	0x62, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xd2, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x20, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xdc, 0x11, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x28, 0x29, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x11DE) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11DD)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::integral_constant<bool,0>
	#   LinkageName: .?AU?$integral_constant@_N$0A@@std@@
	# }
	.byte	0x5a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0xdd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x3c, 0x62, 0x6f, 0x6f
	.byte	0x6c, 0x2c, 0x30, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x69
	.byte	0x6e, 0x74, 0x65, 0x67
	.byte	0x72, 0x61, 0x6c, 0x5f
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x61, 0x6e, 0x74
	.byte	0x40, 0x5f, 0x4e, 0x24
	.byte	0x30, 0x41, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11DF) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::integral_constant<bool,0> (0x11DE)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xtr1common (0x11D8)
	#   LineNumber: 19
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xde, 0x11, 0x00, 0x00
	.byte	0xd8, 0x11, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	# Struct (0x11E0) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x11E1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11E2) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x11E1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0xe1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11E3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   ThisType: std::_String_val<std::_Simple_types<char> >* (0x11E1)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0xe1, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x11E4) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_String_val<std::_Simple_types<char> > (0x11AA)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xaa, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x11E5) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AB)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11E4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0xe4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11E6) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: char* std::_String_val<std::_Simple_types<char> >::() (0x11E3)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const char* std::_String_val<std::_Simple_types<char> >::() (0x11E5)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe3, 0x11, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe5, 0x11, 0x00, 0x00
	# MemberFunction (0x11E7) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11E4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0xe4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11E8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11E4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0xe4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11E9) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11EA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_String_val<std::_Simple_types<char> > (0x115F)
	#   ThisType: const std::_String_val<std::_Simple_types<char> >* (0x11E4)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const unsigned __int64) (0x1173)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0xe4, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x73, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Enum (0x11EB) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x11B2)
	#   Name: std::_String_val<std::_Simple_types<char> >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_BUF_SIZE>@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x96, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xb2, 0x11, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x3a
	.byte	0x3a, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x74, 0x61
	.byte	0x67, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x57, 0x34
	.byte	0x3c, 0x75, 0x6e, 0x6e
	.byte	0x61, 0x6d, 0x65, 0x64
	.byte	0x2d, 0x65, 0x6e, 0x75
	.byte	0x6d, 0x2d, 0x5f, 0x42
	.byte	0x55, 0x46, 0x5f, 0x53
	.byte	0x49, 0x5a, 0x45, 0x3e
	.byte	0x40, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x40, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x11EC) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x11EB)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 1789
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0xfd, 0x06, 0x00, 0x00
	# Enum (0x11ED) {
	#   TypeLeafKind: LF_ENUM (0x1507)
	#   NumEnumerators: 1
	#   Properties [ (0x208)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#   ]
	#   UnderlyingType: unsigned (0x75)
	#   FieldListType: <field list> (0x11B5)
	#   Name: std::_String_val<std::_Simple_types<char> >::<unnamed-tag>
	#   LinkageName: .?AW4<unnamed-enum-_ALLOC_MASK>@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x96, 0x00, 0x07, 0x15
	.byte	0x01, 0x00, 0x08, 0x02
	.byte	0x75, 0x00, 0x00, 0x00
	.byte	0xb5, 0x11, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x69, 0x6d, 0x70, 0x6c
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x73, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x3a
	.byte	0x3a, 0x3c, 0x75, 0x6e
	.byte	0x6e, 0x61, 0x6d, 0x65
	.byte	0x64, 0x2d, 0x74, 0x61
	.byte	0x67, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x57, 0x34
	.byte	0x3c, 0x75, 0x6e, 0x6e
	.byte	0x61, 0x6d, 0x65, 0x64
	.byte	0x2d, 0x65, 0x6e, 0x75
	.byte	0x6d, 0x2d, 0x5f, 0x41
	.byte	0x4c, 0x4c, 0x4f, 0x43
	.byte	0x5f, 0x4d, 0x41, 0x53
	.byte	0x4b, 0x3e, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x11EE) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x11ED)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 1793
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xed, 0x11, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x01, 0x07, 0x00, 0x00
	# FieldList (0x11EF) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Container_base12 (0x11E0)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11B1)
	#     FieldOffset: 0x8
	#     Name: _Bx
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 (0x23)
	#     FieldOffset: 0x18
	#     Name: _Mysize
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 (0x23)
	#     FieldOffset: 0x20
	#     Name: _Myres
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x11E2)
	#     Name: _String_val
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11E6
	#     Name: _Myptr
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: bool std::_String_val<std::_Simple_types<char> >::() (0x11E7)
	#     Name: _Large_string_engaged
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned __int64) (0x11E8)
	#     Name: _Check_offset
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::(const unsigned __int64) (0x11E8)
	#     Name: _Check_offset_exclusive
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_String_val<std::_Simple_types<char> >::() (0x11E9)
	#     Name: _Xran
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::_String_val<std::_Simple_types<char> >::(const unsigned __int64, const unsigned __int64) (0x11EA)
	#     Name: _Clamp_suffix_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AB)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char& (0x114A)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char& (0x114C)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x11EB)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::<unnamed-tag> (0x11ED)
	#     Name: 
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11B1)
	#     Name: _Bxty
	#   }
	# }
	.byte	0xaa, 0x01, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x42
	.byte	0x78, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x18, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x73, 0x69, 0x7a
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x20, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x72, 0x65, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe2, 0x11, 0x00, 0x00
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xe6, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x70
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe7, 0x11, 0x00, 0x00
	.byte	0x5f, 0x4c, 0x61, 0x72
	.byte	0x67, 0x65, 0x5f, 0x73
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x65, 0x6e
	.byte	0x67, 0x61, 0x67, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe8, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xe8, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x68, 0x65
	.byte	0x63, 0x6b, 0x5f, 0x6f
	.byte	0x66, 0x66, 0x73, 0x65
	.byte	0x74, 0x5f, 0x65, 0x78
	.byte	0x63, 0x6c, 0x75, 0x73
	.byte	0x69, 0x76, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xe9, 0x11, 0x00, 0x00
	.byte	0x5f, 0x58, 0x72, 0x61
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0xea, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x61
	.byte	0x6d, 0x70, 0x5f, 0x73
	.byte	0x75, 0x66, 0x66, 0x69
	.byte	0x78, 0x5f, 0x73, 0x69
	.byte	0x7a, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xeb, 0x11, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xed, 0x11, 0x00, 0x00
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	# Class (0x11F0) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 22
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x11EF)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_String_val<std::_Simple_types<char> >
	#   LinkageName: .?AV?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x72, 0x00, 0x04, 0x15
	.byte	0x16, 0x00, 0x10, 0x02
	.byte	0xef, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x00, 0x2e, 0x3f
	.byte	0x41, 0x56, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x74, 0x72
	.byte	0x69, 0x6e, 0x67, 0x5f
	.byte	0x76, 0x61, 0x6c, 0x40
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x11F1) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> > (0x11F0)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 1770
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0xf0, 0x11, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0xea, 0x06, 0x00, 0x00
	# ArgList (0x11F2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x11F3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const char* const, const unsigned __int64) (0x11F2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xf2, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x11F4) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char* const) (0x109E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9e, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11F5) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EB)
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x11F6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const char* const, const unsigned __int64) (0x11F5)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xf5, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11F7) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 4
	#   Arguments [
	#     ArgType: char* const (0x10EB)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x16, 0x00, 0x01, 0x12
	.byte	0x04, 0x00, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x11F8) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 4
	#   ArgListType: (char* const, const unsigned __int64, const char* const, const unsigned __int64) (0x11F7)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x04, 0x00
	.byte	0xf7, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11F9) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: const char* const (0x109D)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char& (0x114C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9d, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	# MemberFunction (0x11FA) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const char* (0x10AB)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (const char* const, const unsigned __int64, const char&) (0x11F9)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xf9, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11FB) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: char* const (0x10EB)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const char (0x109C)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xeb, 0x10, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0x9c, 0x10, 0x00, 0x00
	# MemberFunction (0x11FC) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (char* const, const unsigned __int64, const char) (0x11FB)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0xfb, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x11FD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: char& (0x114A)
	#     ArgType: const char& (0x114C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4a, 0x11, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	# MemberFunction (0x11FE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (char&, const char&) (0x11FD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xfd, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x11FF) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned __int64, const char) (0x11FC)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::char_traits<char>::(char&, const char&) (0x11FE)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xfc, 0x11, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0xfe, 0x11, 0x00, 0x00
	# ArgList (0x1200) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const char& (0x114C)
	#     ArgType: const char& (0x114C)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	.byte	0x4c, 0x11, 0x00, 0x00
	# MemberFunction (0x1201) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const char&, const char&) (0x1200)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x00, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1202) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x1203) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char (0x70)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x1202)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x02, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1204) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const char&) (0x11BE)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xbe, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1205) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int& (0x1062)
	#     ArgType: const int& (0x1062)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	.byte	0x62, 0x10, 0x00, 0x00
	# MemberFunction (0x1206) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: bool (0x30)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int&, const int&) (0x1205)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x30, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x05, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1207) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const int&) (0x1202)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x02, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1208) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: int (0x74)
	#   ClassType: std::char_traits<char> (0x1185)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x85, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Class (0x1209) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::fpos<_Mbstatet>
	#   LinkageName: .?AV?$fpos@U_Mbstatet@@@std@@
	# }
	.byte	0x4a, 0x00, 0x04, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x66
	.byte	0x70, 0x6f, 0x73, 0x3c
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x56, 0x3f
	.byte	0x24, 0x66, 0x70, 0x6f
	.byte	0x73, 0x40, 0x55, 0x5f
	.byte	0x4d, 0x62, 0x73, 0x74
	.byte	0x61, 0x74, 0x65, 0x74
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x120A) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# FieldList (0x120B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char* const, const char* const, const unsigned __int64) (0x11F3)
	#     Name: compare
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::char_traits<char>::(const char* const) (0x11F4)
	#     Name: length
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned __int64) (0x11F6)
	#     Name: copy
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const unsigned __int64, const char* const, const unsigned __int64) (0x11F8)
	#     Name: _Copy_s
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: const char* std::char_traits<char>::(const char* const, const unsigned __int64, const char&) (0x11FA)
	#     Name: find
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::char_traits<char>::(char* const, const char* const, const unsigned __int64) (0x11F6)
	#     Name: move
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x11FF
	#     Name: assign
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x1201)
	#     Name: eq
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const char&, const char&) (0x1201)
	#     Name: lt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char std::char_traits<char>::(const int&) (0x1203)
	#     Name: to_char_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const char&) (0x1204)
	#     Name: to_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: bool std::char_traits<char>::(const int&, const int&) (0x1206)
	#     Name: eq_int_type
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::(const int&) (0x1207)
	#     Name: not_eof
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: int std::char_traits<char>::() (0x1208)
	#     Name: eof
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: char_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: int (0x74)
	#     Name: int_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::fpos<_Mbstatet> (0x1209)
	#     Name: pos_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: off_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: _Mbstatet (0x120A)
	#     Name: state_type
	#   }
	# }
	.byte	0x4a, 0x01, 0x03, 0x12
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xf3, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6d, 0x70
	.byte	0x61, 0x72, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xf4, 0x11, 0x00, 0x00
	.byte	0x6c, 0x65, 0x6e, 0x67
	.byte	0x74, 0x68, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xf6, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xf8, 0x11, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x70
	.byte	0x79, 0x5f, 0x73, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xfa, 0x11, 0x00, 0x00
	.byte	0x66, 0x69, 0x6e, 0x64
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0xf6, 0x11, 0x00, 0x00
	.byte	0x6d, 0x6f, 0x76, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0xff, 0x11, 0x00, 0x00
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x65, 0x71, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x01, 0x12, 0x00, 0x00
	.byte	0x6c, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x03, 0x12, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x04, 0x12, 0x00, 0x00
	.byte	0x74, 0x6f, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x06, 0x12, 0x00, 0x00
	.byte	0x65, 0x71, 0x5f, 0x69
	.byte	0x6e, 0x74, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x07, 0x12, 0x00, 0x00
	.byte	0x6e, 0x6f, 0x74, 0x5f
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x08, 0x12, 0x00, 0x00
	.byte	0x65, 0x6f, 0x66, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x74, 0x00, 0x00, 0x00
	.byte	0x69, 0x6e, 0x74, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x09, 0x12, 0x00, 0x00
	.byte	0x70, 0x6f, 0x73, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x6f, 0x66, 0x66, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x0a, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x61, 0x74
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	# Struct (0x120C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 20
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x120B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::char_traits<char>
	#   LinkageName: .?AU?$char_traits@D@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x14, 0x00, 0x10, 0x02
	.byte	0x0b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x63
	.byte	0x68, 0x61, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x120D) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\iosfwd
	# }
	.byte	0x6e, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x69, 0x6f, 0x73, 0x66
	.byte	0x77, 0x64, 0x00, 0xf1
	# UdtSourceLine (0x120E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::char_traits<char> (0x120C)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\iosfwd (0x120D)
	#   LineNumber: 441
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x0c, 0x12, 0x00, 0x00
	.byte	0x0d, 0x12, 0x00, 0x00
	.byte	0xb9, 0x01, 0x00, 0x00
	# Struct (0x120F) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# FieldList (0x1210) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<char> > (0x120F)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1211) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1210)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x10, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x20, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x74
	.byte	0x72, 0x61, 0x69, 0x74
	.byte	0x73, 0x40, 0x56, 0x3f
	.byte	0x24, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x1212) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<char> > (0x1211)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x11D0)
	#   LineNumber: 902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x11, 0x12, 0x00, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0x86, 0x03, 0x00, 0x00
	# Pointer (0x1213) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x118E)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1214) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char>& (0x1192)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x118E)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x1213)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x13, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1215) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x118E)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1216) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x1215)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x15, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1217) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::allocator<char>& (0x10CD)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x118E)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x1216)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xcd, 0x10, 0x00, 0x00
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x16, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1218) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x1214)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::allocator<char>& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x1217)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x14, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x17, 0x12, 0x00, 0x00
	# MemberFunction (0x1219) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_String_val<std::_Simple_types<char> >& (0x1160)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x118E)
	#   ThisType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x1213)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x60, 0x11, 0x00, 0x00
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x13, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x121A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_String_val<std::_Simple_types<char> >& (0x11AB)
	#   ClassType: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x118E)
	#   ThisType: const std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>* (0x1216)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xab, 0x11, 0x00, 0x00
	.byte	0x8e, 0x11, 0x00, 0x00
	.byte	0x16, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x121B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x1219)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_String_val<std::_Simple_types<char> >& std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::() (0x121A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x19, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x1a, 0x12, 0x00, 0x00
	# FieldList (0x121C) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Private (0x1)
	#     BaseType: std::allocator<char> (0x10CB)
	#     BaseOffset: 0x0
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Private (0x1)
	#     Type: std::_String_val<std::_Simple_types<char> > (0x115F)
	#     FieldOffset: 0x0
	#     Name: _Myval2
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1218
	#     Name: _Get_first
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x121B
	#     Name: _Get_second
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CB)
	#     Name: _Mybase
	#   }
	# }
	.byte	0x5a, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x01, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x01, 0x00
	.byte	0x5f, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x76, 0x61, 0x6c
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x18, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x1b, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x5f, 0x73, 0x65, 0x63
	.byte	0x6f, 0x6e, 0x64, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x5f, 0x4d, 0x79, 0x62
	.byte	0x61, 0x73, 0x65, 0x00
	# Class (0x121D) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 7
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x121C)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 40
	#   Name: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
	#   LinkageName: .?AV?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@
	# }
	.byte	0xce, 0x00, 0x04, 0x15
	.byte	0x07, 0x00, 0x10, 0x02
	.byte	0x1c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x28, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6d, 0x70
	.byte	0x72, 0x65, 0x73, 0x73
	.byte	0x65, 0x64, 0x5f, 0x70
	.byte	0x61, 0x69, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x63
	.byte	0x68, 0x61, 0x72, 0x3e
	.byte	0x2c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x3c, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x20, 0x3e
	.byte	0x2c, 0x31, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x43
	.byte	0x6f, 0x6d, 0x70, 0x72
	.byte	0x65, 0x73, 0x73, 0x65
	.byte	0x64, 0x5f, 0x70, 0x61
	.byte	0x69, 0x72, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x44, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x56
	.byte	0x3f, 0x24, 0x5f, 0x53
	.byte	0x74, 0x72, 0x69, 0x6e
	.byte	0x67, 0x5f, 0x76, 0x61
	.byte	0x6c, 0x40, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x40, 0x32
	.byte	0x40, 0x24, 0x30, 0x30
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# StringId (0x121E) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility
	# }
	.byte	0x72, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x4d
	.byte	0x69, 0x63, 0x72, 0x6f
	.byte	0x73, 0x6f, 0x66, 0x74
	.byte	0x20, 0x56, 0x69, 0x73
	.byte	0x75, 0x61, 0x6c, 0x20
	.byte	0x53, 0x74, 0x75, 0x64
	.byte	0x69, 0x6f, 0x5c, 0x32
	.byte	0x30, 0x31, 0x37, 0x5c
	.byte	0x43, 0x6f, 0x6d, 0x6d
	.byte	0x75, 0x6e, 0x69, 0x74
	.byte	0x79, 0x5c, 0x56, 0x43
	.byte	0x5c, 0x54, 0x6f, 0x6f
	.byte	0x6c, 0x73, 0x5c, 0x4d
	.byte	0x53, 0x56, 0x43, 0x5c
	.byte	0x31, 0x34, 0x2e, 0x31
	.byte	0x36, 0x2e, 0x32, 0x37
	.byte	0x30, 0x32, 0x33, 0x5c
	.byte	0x69, 0x6e, 0x63, 0x6c
	.byte	0x75, 0x64, 0x65, 0x5c
	.byte	0x78, 0x75, 0x74, 0x69
	.byte	0x6c, 0x69, 0x74, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x121F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> (0x121D)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x121E)
	#   LineNumber: 265
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x1d, 0x12, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x09, 0x01, 0x00, 0x00
	# MemberFunction (0x1220) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x1195)
	#   ThisType: std::_Iterator_base12* (0x1196)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1221) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Iterator_base12 (0x1195)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1222) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x1221)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x21, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1223) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Iterator_base12& (0x1222)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x22, 0x12, 0x00, 0x00
	# MemberFunction (0x1224) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x1195)
	#   ThisType: std::_Iterator_base12* (0x1196)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x1223)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x23, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1225) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x1220)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Iterator_base12&) (0x1224)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x24, 0x12, 0x00, 0x00
	# Pointer (0x1226) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Iterator_base12 (0x1195)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1227) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12& (0x1226)
	#   ClassType: std::_Iterator_base12 (0x1195)
	#   ThisType: std::_Iterator_base12* (0x1196)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Iterator_base12&) (0x1223)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x26, 0x12, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x23, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x1228) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_base12 (0x11E0)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1229) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x1228)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x122A) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12* (0x1229)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	# MemberFunction (0x122B) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Iterator_base12 (0x1195)
	#   ThisType: std::_Iterator_base12* (0x1196)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12*) (0x122A)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x2a, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x122C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Iterator_base12 (0x1221)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x21, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x122D) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Container_base12* (0x1229)
	#   ClassType: std::_Iterator_base12 (0x1195)
	#   ThisType: const std::_Iterator_base12* (0x122C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x2c, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x122E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1197)
	#   ClassType: std::_Iterator_base12 (0x1195)
	#   ThisType: std::_Iterator_base12* (0x1196)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x97, 0x11, 0x00, 0x00
	.byte	0x95, 0x11, 0x00, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x122F) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   StaticDataMember {
	#     TypeLeafKind: LF_STMEMBER (0x150E)
	#     AccessSpecifier: Public (0x3)
	#     Type: const bool (0x11D2)
	#     Name: _Unwrap_when_unverified
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x119C)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1196)
	#     FieldOffset: 0x8
	#     Name: _Mynextiter
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1225
	#     Name: _Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12& std::_Iterator_base12::(const std::_Iterator_base12&) (0x1227)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x1220)
	#     Name: ~_Iterator_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::(const std::_Container_base12*) (0x122B)
	#     Name: _Adopt
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x1220)
	#     Name: _Clrcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* std::_Iterator_base12::() (0x122D)
	#     Name: _Getcont
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Iterator_base12::() (0x122E)
	#     Name: _Getpnext
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Iterator_base12::() (0x1220)
	#     Name: _Orphan_me
	#   }
	# }
	.byte	0xfa, 0x00, 0x03, 0x12
	.byte	0x0e, 0x15, 0x03, 0x00
	.byte	0xd2, 0x11, 0x00, 0x00
	.byte	0x5f, 0x55, 0x6e, 0x77
	.byte	0x72, 0x61, 0x70, 0x5f
	.byte	0x77, 0x68, 0x65, 0x6e
	.byte	0x5f, 0x75, 0x6e, 0x76
	.byte	0x65, 0x72, 0x69, 0x66
	.byte	0x69, 0x65, 0x64, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x6e, 0x65, 0x78
	.byte	0x74, 0x69, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x25, 0x12, 0x00, 0x00
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x27, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x49, 0x74
	.byte	0x65, 0x72, 0x61, 0x74
	.byte	0x6f, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2b, 0x12, 0x00, 0x00
	.byte	0x5f, 0x41, 0x64, 0x6f
	.byte	0x70, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6c, 0x72
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2d, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x63, 0x6f, 0x6e, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x2e, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x6e, 0x65, 0x78
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x20, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x6d, 0x65, 0x00, 0xf1
	# Struct (0x1230) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 12
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x122F)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: std::_Iterator_base12
	#   LinkageName: .?AU_Iterator_base12@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x0c, 0x00, 0x00, 0x02
	.byte	0x2f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x49, 0x74, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x62, 0x61, 0x73
	.byte	0x65, 0x31, 0x32, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x49, 0x74, 0x65
	.byte	0x72, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1231) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Iterator_base12 (0x1230)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x121E)
	#   LineNumber: 105
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x30, 0x12, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x69, 0x00, 0x00, 0x00
	# MemberFunction (0x1232) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_proxy (0x119B)
	#   ThisType: std::_Container_proxy* (0x119C)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1233) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_base12* (0x1229)
	#     FieldOffset: 0x0
	#     Name: _Mycont
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12* (0x1196)
	#     FieldOffset: 0x8
	#     Name: _Myfirstiter
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_proxy::() (0x1232)
	#     Name: _Container_proxy
	#   }
	# }
	.byte	0x4a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x00, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x96, 0x11, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x69, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x32, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x1234) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1233)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 16
	#   Name: std::_Container_proxy
	#   LinkageName: .?AU_Container_proxy@std@@
	# }
	.byte	0x46, 0x00, 0x05, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0x33, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1235) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_proxy (0x1234)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x121E)
	#   LineNumber: 65
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x34, 0x12, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x41, 0x00, 0x00, 0x00
	# Modifier (0x1236) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::allocator<std::_Container_proxy> (0x11AE)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1237) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<std::_Container_proxy> (0x1236)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x1238) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_proxy (0x119B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1239) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_proxy& (0x1238)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x38, 0x12, 0x00, 0x00
	# MemberFunction (0x123A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x119C)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x1237)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_proxy&) (0x1239)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x37, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x39, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Modifier (0x123B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_proxy (0x119B)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x123C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_proxy (0x123B)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x3b, 0x12, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# Pointer (0x123D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_proxy (0x123B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x3b, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x123E) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_proxy& (0x123D)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x3d, 0x12, 0x00, 0x00
	# MemberFunction (0x123F) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: const std::_Container_proxy* (0x123C)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x1237)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_proxy&) (0x123E)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x37, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x3e, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1240) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(std::_Container_proxy&) (0x123A)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: const std::_Container_proxy* std::allocator<std::_Container_proxy>::(const std::_Container_proxy&) (0x123F)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3a, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x3f, 0x12, 0x00, 0x00
	# Pointer (0x1241) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<std::_Container_proxy> (0x11AE)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1242) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x1243) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::allocator<std::_Container_proxy> (0x1236)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x36, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1244) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::allocator<std::_Container_proxy>& (0x1243)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x43, 0x12, 0x00, 0x00
	# MemberFunction (0x1245) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x1244)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x44, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1246) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::() (0x1242)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::(const std::allocator<std::_Container_proxy>&) (0x1245)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x42, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x45, 0x12, 0x00, 0x00
	# ArgList (0x1247) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::_Container_proxy* const (0x119F)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x9f, 0x11, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1248) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::_Container_proxy* const, const unsigned __int64) (0x1247)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x47, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1249) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x119C)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const unsigned __int64) (0x1135)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x35, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x124A) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x119C)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: std::allocator<std::_Container_proxy>* (0x1241)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const unsigned __int64, const void*) (0x11CA)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x41, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xca, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x124B) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(const unsigned __int64) (0x1249)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* std::allocator<std::_Container_proxy>::(const unsigned __int64, const void*) (0x124A)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x49, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x4a, 0x12, 0x00, 0x00
	# MemberFunction (0x124C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ThisType: const std::allocator<std::_Container_proxy>* (0x1237)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x37, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x124D) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1240
	#     Name: address
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1246
	#     Name: allocator
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::allocator<std::_Container_proxy>::(std::_Container_proxy* const, const unsigned __int64) (0x1248)
	#     Name: deallocate
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x124B
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned __int64 std::allocator<std::_Container_proxy>::() (0x124C)
	#     Name: max_size
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void (0x3)
	#     Name: _Not_user_specialized
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy (0x119B)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy* (0x119C)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy* (0x123C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy& (0x1238)
	#     Name: reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy& (0x123D)
	#     Name: const_reference
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0x5e, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x40, 0x12, 0x00, 0x00
	.byte	0x61, 0x64, 0x64, 0x72
	.byte	0x65, 0x73, 0x73, 0x00
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x46, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x48, 0x12, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x4b, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x4c, 0x12, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5f, 0x4e, 0x6f, 0x74
	.byte	0x5f, 0x75, 0x73, 0x65
	.byte	0x72, 0x5f, 0x73, 0x70
	.byte	0x65, 0x63, 0x69, 0x61
	.byte	0x6c, 0x69, 0x7a, 0x65
	.byte	0x64, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x38, 0x12, 0x00, 0x00
	.byte	0x72, 0x65, 0x66, 0x65
	.byte	0x72, 0x65, 0x6e, 0x63
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3d, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x72, 0x65
	.byte	0x66, 0x65, 0x72, 0x65
	.byte	0x6e, 0x63, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Class (0x124E) {
	#   TypeLeafKind: LF_CLASS (0x1504)
	#   MemberCount: 18
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x124D)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator<std::_Container_proxy>
	#   LinkageName: .?AV?$allocator@U_Container_proxy@std@@@std@@
	# }
	.byte	0x6a, 0x00, 0x04, 0x15
	.byte	0x12, 0x00, 0x10, 0x02
	.byte	0x4d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x5f, 0x43
	.byte	0x6f, 0x6e, 0x74, 0x61
	.byte	0x69, 0x6e, 0x65, 0x72
	.byte	0x5f, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x124F) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator<std::_Container_proxy> (0x124E)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x11D0)
	#   LineNumber: 940
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x4e, 0x12, 0x00, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0xac, 0x03, 0x00, 0x00
	# Struct (0x1250) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 0
	#   Properties [ (0x280)
	#     ForwardReference (0x80)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: 0x0
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 0
	#   Name: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0xae, 0x00, 0x05, 0x15
	.byte	0x00, 0x00, 0x80, 0x02
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x55, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# FieldList (0x1251) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   BaseClass {
	#     TypeLeafKind: LF_BCLASS (0x1400)
	#     AccessSpecifier: Public (0x3)
	#     BaseType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1250)
	#     BaseOffset: 0x0
	#   }
	# }
	.byte	0x0e, 0x00, 0x03, 0x12
	.byte	0x00, 0x14, 0x03, 0x00
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0xf2, 0xf1
	# Struct (0x1252) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 1
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1251)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0x9a, 0x00, 0x05, 0x15
	.byte	0x01, 0x00, 0x00, 0x02
	.byte	0x51, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x61, 0x6c, 0x6c
	.byte	0x6f, 0x63, 0x61, 0x74
	.byte	0x6f, 0x72, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x70
	.byte	0x72, 0x6f, 0x78, 0x79
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x5f
	.byte	0x74, 0x72, 0x61, 0x69
	.byte	0x74, 0x73, 0x40, 0x56
	.byte	0x3f, 0x24, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x40
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x1253) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::allocator_traits<std::allocator<std::_Container_proxy> > (0x1252)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x11D0)
	#   LineNumber: 902
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x52, 0x12, 0x00, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0x86, 0x03, 0x00, 0x00
	# FieldList (0x1254) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AB)
	#     Name: const_pointer
	#   }
	# }
	.byte	0x6a, 0x00, 0x03, 0x12
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	# Struct (0x1255) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 5
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1254)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Simple_types<char>
	#   LinkageName: .?AU?$_Simple_types@D@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x05, 0x00, 0x10, 0x02
	.byte	0x54, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x69, 0x6d, 0x70
	.byte	0x6c, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x73
	.byte	0x3c, 0x63, 0x68, 0x61
	.byte	0x72, 0x3e, 0x00, 0x2e
	.byte	0x3f, 0x41, 0x55, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x69
	.byte	0x6d, 0x70, 0x6c, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x73, 0x40, 0x44
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x1256) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Simple_types<char> (0x1255)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x11D0)
	#   LineNumber: 928
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x55, 0x12, 0x00, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0xa0, 0x03, 0x00, 0x00
	# Array (0x1257) {
	#   TypeLeafKind: LF_ARRAY (0x1503)
	#   ElementType: char (0x70)
	#   IndexType: unsigned __int64 (0x23)
	#   SizeOf: 16
	#   Name: 
	# }
	.byte	0x0e, 0x00, 0x03, 0x15
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x10, 0x00, 0x00, 0xf1
	# Pointer (0x1258) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11B1)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x1259) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_String_val<std::_Simple_types<char> >::_Bxty (0x11B1)
	#   ThisType: std::_String_val<std::_Simple_types<char> >::_Bxty* (0x1258)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xb1, 0x11, 0x00, 0x00
	.byte	0x58, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x125A) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x1257
	#     FieldOffset: 0x0
	#     Name: _Buf
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: char* (0x670)
	#     FieldOffset: 0x0
	#     Name: _Ptr
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: 0x1257
	#     FieldOffset: 0x0
	#     Name: _Alias
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x1259)
	#     Name: _Bxty
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_String_val<std::_Simple_types<char> >::_Bxty::() (0x1259)
	#     Name: ~_Bxty
	#   }
	# }
	.byte	0x56, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x42
	.byte	0x75, 0x66, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x50
	.byte	0x74, 0x72, 0x00, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x57, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x41
	.byte	0x6c, 0x69, 0x61, 0x73
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	.byte	0x5f, 0x42, 0x78, 0x74
	.byte	0x79, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x59, 0x12, 0x00, 0x00
	.byte	0x7e, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x00, 0xf1
	# Union (0x125B) {
	#   TypeLeafKind: LF_UNION (0x1506)
	#   MemberCount: 5
	#   Properties [ (0x608)
	#     HasUniqueName (0x200)
	#     Nested (0x8)
	#     Sealed (0x400)
	#   ]
	#   FieldList: <field list> (0x125A)
	#   SizeOf: 16
	#   Name: std::_String_val<std::_Simple_types<char> >::_Bxty
	#   LinkageName: .?AT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@
	# }
	.byte	0x76, 0x00, 0x06, 0x15
	.byte	0x05, 0x00, 0x08, 0x06
	.byte	0x5a, 0x12, 0x00, 0x00
	.byte	0x10, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x53, 0x74, 0x72, 0x69
	.byte	0x6e, 0x67, 0x5f, 0x76
	.byte	0x61, 0x6c, 0x3c, 0x73
	.byte	0x74, 0x64, 0x3a, 0x3a
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x3c, 0x63, 0x68
	.byte	0x61, 0x72, 0x3e, 0x20
	.byte	0x3e, 0x3a, 0x3a, 0x5f
	.byte	0x42, 0x78, 0x74, 0x79
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x54, 0x5f, 0x42, 0x78
	.byte	0x74, 0x79, 0x40, 0x3f
	.byte	0x24, 0x5f, 0x53, 0x74
	.byte	0x72, 0x69, 0x6e, 0x67
	.byte	0x5f, 0x76, 0x61, 0x6c
	.byte	0x40, 0x55, 0x3f, 0x24
	.byte	0x5f, 0x53, 0x69, 0x6d
	.byte	0x70, 0x6c, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x73, 0x40, 0x44, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x00
	# UdtSourceLine (0x125C) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_String_val<std::_Simple_types<char> >::_Bxty (0x125B)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xstring (0x1189)
	#   LineNumber: 1854
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x5b, 0x12, 0x00, 0x00
	.byte	0x89, 0x11, 0x00, 0x00
	.byte	0x3e, 0x07, 0x00, 0x00
	# Pointer (0x125D) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x11E0)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# MemberFunction (0x125E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x11E0)
	#   ThisType: std::_Container_base12* (0x125D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# Pointer (0x125F) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::_Container_base12 (0x1228)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x28, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1260) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::_Container_base12& (0x125F)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x5f, 0x12, 0x00, 0x00
	# MemberFunction (0x1261) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x11E0)
	#   ThisType: std::_Container_base12* (0x125D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x1260)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x60, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1262) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x125E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(const std::_Container_base12&) (0x1261)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x5e, 0x12, 0x00, 0x00
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x61, 0x12, 0x00, 0x00
	# Pointer (0x1263) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::_Container_base12 (0x11E0)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# MemberFunction (0x1264) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_base12& (0x1263)
	#   ClassType: std::_Container_base12 (0x11E0)
	#   ThisType: std::_Container_base12* (0x125D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::_Container_base12&) (0x1260)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x63, 0x12, 0x00, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x60, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1265) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Iterator_base12** (0x1197)
	#   ClassType: std::_Container_base12 (0x11E0)
	#   ThisType: const std::_Container_base12* (0x1229)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x97, 0x11, 0x00, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x29, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1266) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::_Container_base12& (0x1263)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x63, 0x12, 0x00, 0x00
	# MemberFunction (0x1267) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Container_base12 (0x11E0)
	#   ThisType: std::_Container_base12* (0x125D)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::_Container_base12&) (0x1266)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0xe0, 0x11, 0x00, 0x00
	.byte	0x5d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x66, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1268) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_proxy* (0x119C)
	#     FieldOffset: 0x0
	#     Name: _Myproxy
	#   }
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1262
	#     Name: _Container_base12
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Container_base12& std::_Container_base12::(const std::_Container_base12&) (0x1264)
	#     Name: operator=
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: std::_Iterator_base12** std::_Container_base12::() (0x1265)
	#     Name: _Getpfirst
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::() (0x125E)
	#     Name: _Orphan_all
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     Type: void std::_Container_base12::(std::_Container_base12&) (0x1267)
	#     Name: _Swap_all
	#   }
	# }
	.byte	0x82, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x4d
	.byte	0x79, 0x70, 0x72, 0x6f
	.byte	0x78, 0x79, 0x00, 0xf1
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x62, 0x12, 0x00, 0x00
	.byte	0x5f, 0x43, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x62
	.byte	0x61, 0x73, 0x65, 0x31
	.byte	0x32, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x64, 0x12, 0x00, 0x00
	.byte	0x6f, 0x70, 0x65, 0x72
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x3d, 0x00, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x65, 0x12, 0x00, 0x00
	.byte	0x5f, 0x47, 0x65, 0x74
	.byte	0x70, 0x66, 0x69, 0x72
	.byte	0x73, 0x74, 0x00, 0xf1
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x5e, 0x12, 0x00, 0x00
	.byte	0x5f, 0x4f, 0x72, 0x70
	.byte	0x68, 0x61, 0x6e, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x00
	.byte	0x11, 0x15, 0x03, 0x00
	.byte	0x67, 0x12, 0x00, 0x00
	.byte	0x5f, 0x53, 0x77, 0x61
	.byte	0x70, 0x5f, 0x61, 0x6c
	.byte	0x6c, 0x00, 0xf2, 0xf1
	# Struct (0x1269) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 7
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1268)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: std::_Container_base12
	#   LinkageName: .?AU_Container_base12@std@@
	# }
	.byte	0x4a, 0x00, 0x05, 0x15
	.byte	0x07, 0x00, 0x00, 0x02
	.byte	0x68, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x62, 0x61
	.byte	0x73, 0x65, 0x31, 0x32
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x62, 0x61, 0x73, 0x65
	.byte	0x31, 0x32, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# UdtSourceLine (0x126A) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Container_base12 (0x1269)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xutility (0x121E)
	#   LineNumber: 76
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x69, 0x12, 0x00, 0x00
	.byte	0x1e, 0x12, 0x00, 0x00
	.byte	0x4c, 0x00, 0x00, 0x00
	# FieldList (0x126B) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned long (0x22)
	#     FieldOffset: 0x0
	#     Name: _Wchar
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x4
	#     Name: _Byte
	#   }
	#   DataMember {
	#     TypeLeafKind: LF_MEMBER (0x150D)
	#     AccessSpecifier: Public (0x3)
	#     Type: unsigned short (0x21)
	#     FieldOffset: 0x6
	#     Name: _State
	#   }
	# }
	.byte	0x3a, 0x00, 0x03, 0x12
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x22, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x5f, 0x57
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x04, 0x00, 0x5f, 0x42
	.byte	0x79, 0x74, 0x65, 0x00
	.byte	0x0d, 0x15, 0x03, 0x00
	.byte	0x21, 0x00, 0x00, 0x00
	.byte	0x06, 0x00, 0x5f, 0x53
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Struct (0x126C) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 3
	#   Properties [ (0x200)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x126B)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 8
	#   Name: _Mbstatet
	#   LinkageName: .?AU_Mbstatet@@
	# }
	.byte	0x2e, 0x00, 0x05, 0x15
	.byte	0x03, 0x00, 0x00, 0x02
	.byte	0x6b, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x08, 0x00, 0x5f, 0x4d
	.byte	0x62, 0x73, 0x74, 0x61
	.byte	0x74, 0x65, 0x74, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x5f, 0x4d, 0x62, 0x73
	.byte	0x74, 0x61, 0x74, 0x65
	.byte	0x74, 0x40, 0x40, 0x00
	# StringId (0x126D) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h
	# }
	.byte	0x52, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x43, 0x3a, 0x5c, 0x50
	.byte	0x72, 0x6f, 0x67, 0x72
	.byte	0x61, 0x6d, 0x20, 0x46
	.byte	0x69, 0x6c, 0x65, 0x73
	.byte	0x20, 0x28, 0x78, 0x38
	.byte	0x36, 0x29, 0x5c, 0x57
	.byte	0x69, 0x6e, 0x64, 0x6f
	.byte	0x77, 0x73, 0x20, 0x4b
	.byte	0x69, 0x74, 0x73, 0x5c
	.byte	0x31, 0x30, 0x5c, 0x69
	.byte	0x6e, 0x63, 0x6c, 0x75
	.byte	0x64, 0x65, 0x5c, 0x31
	.byte	0x30, 0x2e, 0x30, 0x2e
	.byte	0x31, 0x37, 0x37, 0x36
	.byte	0x33, 0x2e, 0x30, 0x5c
	.byte	0x75, 0x63, 0x72, 0x74
	.byte	0x5c, 0x63, 0x6f, 0x72
	.byte	0x65, 0x63, 0x72, 0x74
	.byte	0x2e, 0x68, 0x00, 0xf1
	# UdtSourceLine (0x126E) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: _Mbstatet (0x126C)
	#   SourceFile: C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt.h (0x126D)
	#   LineNumber: 531
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x6c, 0x12, 0x00, 0x00
	.byte	0x6d, 0x12, 0x00, 0x00
	.byte	0x13, 0x02, 0x00, 0x00
	# ArgList (0x126F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x1192)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1270) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x120F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<char>&, const unsigned __int64) (0x126F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x6f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x1271) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x1192)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const void* (0x11C9)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	# MemberFunction (0x1272) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: char* (0x670)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x120F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const unsigned __int64, const void*) (0x1271)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x71, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1273) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned __int64) (0x1270)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: char* std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const unsigned __int64, const void*) (0x1272)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x70, 0x12, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x72, 0x12, 0x00, 0x00
	# Modifier (0x1274) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: char* (0x670)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x1275) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<char>& (0x1192)
	#     ArgType: const char* (0x1274)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x92, 0x11, 0x00, 0x00
	.byte	0x74, 0x12, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1276) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x120F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<char>&, const char*, const unsigned __int64) (0x1275)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x75, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1277) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x120F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1278) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<char> (0x10CB)
	#   ClassType: std::_Default_allocator_traits<std::allocator<char> > (0x120F)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<char>&) (0x10D1)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x0f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xd1, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1279) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1273
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<char> >::(std::allocator<char>&, const char*, const unsigned __int64) (0x1276)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x1277)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<char> std::_Default_allocator_traits<std::allocator<char> >::(const std::allocator<char>&) (0x1278)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<char> (0x10CB)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char (0x70)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: char* (0x670)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const char* (0x10AB)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x603)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x11C9)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x1103)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x1103)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x73, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x76, 0x12, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x77, 0x12, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x78, 0x12, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xcb, 0x10, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x00, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x70, 0x06, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xab, 0x10, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x127A) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1279)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<char> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@D@std@@@std@@
	# }
	.byte	0x86, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0x79, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x63, 0x68, 0x61, 0x72
	.byte	0x3e, 0x20, 0x3e, 0x00
	.byte	0x2e, 0x3f, 0x41, 0x55
	.byte	0x3f, 0x24, 0x5f, 0x44
	.byte	0x65, 0x66, 0x61, 0x75
	.byte	0x6c, 0x74, 0x5f, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x5f, 0x74, 0x72, 0x61
	.byte	0x69, 0x74, 0x73, 0x40
	.byte	0x56, 0x3f, 0x24, 0x61
	.byte	0x6c, 0x6c, 0x6f, 0x63
	.byte	0x61, 0x74, 0x6f, 0x72
	.byte	0x40, 0x44, 0x40, 0x73
	.byte	0x74, 0x64, 0x40, 0x40
	.byte	0x40, 0x73, 0x74, 0x64
	.byte	0x40, 0x40, 0x00, 0xf1
	# UdtSourceLine (0x127B) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<char> > (0x127A)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x11D0)
	#   LineNumber: 835
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x7a, 0x12, 0x00, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0x43, 0x03, 0x00, 0x00
	# Pointer (0x127C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::allocator<std::_Container_proxy> (0x11AE)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x127D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x127C)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x7c, 0x12, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x127E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x119C)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1250)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const unsigned __int64) (0x127D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0x7d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# ArgList (0x127F) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x127C)
	#     ArgType: const unsigned __int64 (0x10C8)
	#     ArgType: const void* (0x11C9)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7c, 0x12, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	# MemberFunction (0x1280) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::_Container_proxy* (0x119C)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1250)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const unsigned __int64, const void*) (0x127F)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x7f, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MethodOverloadList (0x1281) {
	#   TypeLeafKind: LF_METHODLIST (0x1206)
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::_Container_proxy* std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const unsigned __int64) (0x127E)
	#   ]
	#   Method [
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::_Container_proxy* std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const unsigned __int64, const void*) (0x1280)
	#   ]
	# }
	.byte	0x12, 0x00, 0x06, 0x12
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x7e, 0x12, 0x00, 0x00
	.byte	0x0b, 0x00, 0x00, 0x00
	.byte	0x80, 0x12, 0x00, 0x00
	# Modifier (0x1282) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::_Container_proxy* (0x119C)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# ArgList (0x1283) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 3
	#   Arguments [
	#     ArgType: std::allocator<std::_Container_proxy>& (0x127C)
	#     ArgType: const std::_Container_proxy* (0x1282)
	#     ArgType: const unsigned __int64 (0x10C8)
	#   ]
	# }
	.byte	0x12, 0x00, 0x01, 0x12
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x7c, 0x12, 0x00, 0x00
	.byte	0x82, 0x12, 0x00, 0x00
	.byte	0xc8, 0x10, 0x00, 0x00
	# MemberFunction (0x1284) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1250)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 3
	#   ArgListType: (std::allocator<std::_Container_proxy>&, const std::_Container_proxy*, const unsigned __int64) (0x1283)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x03, 0x00
	.byte	0x83, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1285) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: unsigned __int64 (0x23)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1250)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x1244)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x44, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFunction (0x1286) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: std::allocator<std::_Container_proxy> (0x11AE)
	#   ClassType: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1250)
	#   ThisType: 0x0
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::allocator<std::_Container_proxy>&) (0x1244)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x50, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x44, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# FieldList (0x1287) {
	#   TypeLeafKind: LF_FIELDLIST (0x1203)
	#   OverloadedMethod {
	#     TypeLeafKind: LF_METHOD (0x150F)
	#     MethodCount: 0x2
	#     MethodListIndex: 0x1281
	#     Name: allocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: void std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(std::allocator<std::_Container_proxy>&, const std::_Container_proxy*, const unsigned __int64) (0x1284)
	#     Name: deallocate
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: unsigned __int64 std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(const std::allocator<std::_Container_proxy>&) (0x1285)
	#     Name: max_size
	#   }
	#   OneMethod {
	#     TypeLeafKind: LF_ONEMETHOD (0x1511)
	#     AccessSpecifier: Public (0x3)
	#     MethodKind: Static (0x2)
	#     Type: std::allocator<std::_Container_proxy> std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::(const std::allocator<std::_Container_proxy>&) (0x1286)
	#     Name: select_on_container_copy_construction
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::allocator<std::_Container_proxy> (0x11AE)
	#     Name: allocator_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy (0x119B)
	#     Name: value_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::_Container_proxy* (0x119C)
	#     Name: pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const std::_Container_proxy* (0x123C)
	#     Name: const_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: void* (0x603)
	#     Name: void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: const void* (0x11C9)
	#     Name: const_void_pointer
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: unsigned __int64 (0x23)
	#     Name: size_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: __int64 (0x13)
	#     Name: difference_type
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x1103)
	#     Name: propagate_on_container_copy_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: propagate_on_container_move_assignment
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,0> (0x1103)
	#     Name: propagate_on_container_swap
	#   }
	#   NestedType {
	#     TypeLeafKind: LF_NESTTYPE (0x1510)
	#     Type: std::integral_constant<bool,1> (0x1100)
	#     Name: is_always_equal
	#   }
	# }
	.byte	0xbe, 0x01, 0x03, 0x12
	.byte	0x0f, 0x15, 0x02, 0x00
	.byte	0x81, 0x12, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x84, 0x12, 0x00, 0x00
	.byte	0x64, 0x65, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x65, 0x00, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x85, 0x12, 0x00, 0x00
	.byte	0x6d, 0x61, 0x78, 0x5f
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x11, 0x15, 0x0b, 0x00
	.byte	0x86, 0x12, 0x00, 0x00
	.byte	0x73, 0x65, 0x6c, 0x65
	.byte	0x63, 0x74, 0x5f, 0x6f
	.byte	0x6e, 0x5f, 0x63, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x63, 0x6f, 0x70, 0x79
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x73, 0x74, 0x72, 0x75
	.byte	0x63, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xae, 0x11, 0x00, 0x00
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9b, 0x11, 0x00, 0x00
	.byte	0x76, 0x61, 0x6c, 0x75
	.byte	0x65, 0x5f, 0x74, 0x79
	.byte	0x70, 0x65, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x9c, 0x11, 0x00, 0x00
	.byte	0x70, 0x6f, 0x69, 0x6e
	.byte	0x74, 0x65, 0x72, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x3c, 0x12, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x70, 0x6f
	.byte	0x69, 0x6e, 0x74, 0x65
	.byte	0x72, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x06, 0x00, 0x00
	.byte	0x76, 0x6f, 0x69, 0x64
	.byte	0x5f, 0x70, 0x6f, 0x69
	.byte	0x6e, 0x74, 0x65, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0xc9, 0x11, 0x00, 0x00
	.byte	0x63, 0x6f, 0x6e, 0x73
	.byte	0x74, 0x5f, 0x76, 0x6f
	.byte	0x69, 0x64, 0x5f, 0x70
	.byte	0x6f, 0x69, 0x6e, 0x74
	.byte	0x65, 0x72, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x23, 0x00, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x5f, 0x74, 0x79, 0x70
	.byte	0x65, 0x00, 0xf2, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x13, 0x00, 0x00, 0x00
	.byte	0x64, 0x69, 0x66, 0x66
	.byte	0x65, 0x72, 0x65, 0x6e
	.byte	0x63, 0x65, 0x5f, 0x74
	.byte	0x79, 0x70, 0x65, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x63
	.byte	0x6f, 0x70, 0x79, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x6d
	.byte	0x6f, 0x76, 0x65, 0x5f
	.byte	0x61, 0x73, 0x73, 0x69
	.byte	0x67, 0x6e, 0x6d, 0x65
	.byte	0x6e, 0x74, 0x00, 0xf1
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x03, 0x11, 0x00, 0x00
	.byte	0x70, 0x72, 0x6f, 0x70
	.byte	0x61, 0x67, 0x61, 0x74
	.byte	0x65, 0x5f, 0x6f, 0x6e
	.byte	0x5f, 0x63, 0x6f, 0x6e
	.byte	0x74, 0x61, 0x69, 0x6e
	.byte	0x65, 0x72, 0x5f, 0x73
	.byte	0x77, 0x61, 0x70, 0x00
	.byte	0x10, 0x15, 0x00, 0x00
	.byte	0x00, 0x11, 0x00, 0x00
	.byte	0x69, 0x73, 0x5f, 0x61
	.byte	0x6c, 0x77, 0x61, 0x79
	.byte	0x73, 0x5f, 0x65, 0x71
	.byte	0x75, 0x61, 0x6c, 0x00
	# Struct (0x1288) {
	#   TypeLeafKind: LF_STRUCTURE (0x1505)
	#   MemberCount: 17
	#   Properties [ (0x210)
	#     ContainsNestedClass (0x10)
	#     HasUniqueName (0x200)
	#   ]
	#   FieldList: <field list> (0x1287)
	#   DerivedFrom: 0x0
	#   VShape: 0x0
	#   SizeOf: 1
	#   Name: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >
	#   LinkageName: .?AU?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@
	# }
	.byte	0xae, 0x00, 0x05, 0x15
	.byte	0x11, 0x00, 0x10, 0x02
	.byte	0x87, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x01, 0x00, 0x73, 0x74
	.byte	0x64, 0x3a, 0x3a, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x3c, 0x73, 0x74, 0x64
	.byte	0x3a, 0x3a, 0x61, 0x6c
	.byte	0x6c, 0x6f, 0x63, 0x61
	.byte	0x74, 0x6f, 0x72, 0x3c
	.byte	0x73, 0x74, 0x64, 0x3a
	.byte	0x3a, 0x5f, 0x43, 0x6f
	.byte	0x6e, 0x74, 0x61, 0x69
	.byte	0x6e, 0x65, 0x72, 0x5f
	.byte	0x70, 0x72, 0x6f, 0x78
	.byte	0x79, 0x3e, 0x20, 0x3e
	.byte	0x00, 0x2e, 0x3f, 0x41
	.byte	0x55, 0x3f, 0x24, 0x5f
	.byte	0x44, 0x65, 0x66, 0x61
	.byte	0x75, 0x6c, 0x74, 0x5f
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x5f, 0x74, 0x72
	.byte	0x61, 0x69, 0x74, 0x73
	.byte	0x40, 0x56, 0x3f, 0x24
	.byte	0x61, 0x6c, 0x6c, 0x6f
	.byte	0x63, 0x61, 0x74, 0x6f
	.byte	0x72, 0x40, 0x55, 0x5f
	.byte	0x43, 0x6f, 0x6e, 0x74
	.byte	0x61, 0x69, 0x6e, 0x65
	.byte	0x72, 0x5f, 0x70, 0x72
	.byte	0x6f, 0x78, 0x79, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x40, 0x73, 0x74
	.byte	0x64, 0x40, 0x40, 0x40
	.byte	0x73, 0x74, 0x64, 0x40
	.byte	0x40, 0x00, 0xf2, 0xf1
	# UdtSourceLine (0x1289) {
	#   TypeLeafKind: LF_UDT_SRC_LINE (0x1606)
	#   UDT: std::_Default_allocator_traits<std::allocator<std::_Container_proxy> > (0x1288)
	#   SourceFile: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory0 (0x11D0)
	#   LineNumber: 835
	# }
	.byte	0x0e, 0x00, 0x06, 0x16
	.byte	0x88, 0x12, 0x00, 0x00
	.byte	0xd0, 0x11, 0x00, 0x00
	.byte	0x43, 0x03, 0x00, 0x00
	# FuncId (0x128A) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: gsl::details (0x1094)
	#   FunctionType: void (gsl::fail_fast&&) (0x1098)
	#   Name: throw_exception
	# }
	.byte	0x1a, 0x00, 0x01, 0x16
	.byte	0x94, 0x10, 0x00, 0x00
	.byte	0x98, 0x10, 0x00, 0x00
	.byte	0x74, 0x68, 0x72, 0x6f
	.byte	0x77, 0x5f, 0x65, 0x78
	.byte	0x63, 0x65, 0x70, 0x74
	.byte	0x69, 0x6f, 0x6e, 0x00
	# MemberFuncId (0x128B) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1095)
	#   FunctionType: void gsl::fail_fast::(const char* const) (0x109F)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x9f, 0x10, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# MemberFunction (0x128C) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1095)
	#   ThisType: gsl::fail_fast* (0x109B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x128D) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1095)
	#   FunctionType: void gsl::fail_fast::() (0x128C)
	#   Name: ~fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x8c, 0x12, 0x00, 0x00
	.byte	0x7e, 0x66, 0x61, 0x69
	.byte	0x6c, 0x5f, 0x66, 0x61
	.byte	0x73, 0x74, 0x00, 0xf1
	# MemberFuncId (0x128E) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::details::extent_type<0> (0x1080)
	#   FunctionType: __int64 gsl::details::extent_type<0>::() (0x1087)
	#   Name: size
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x80, 0x10, 0x00, 0x00
	.byte	0x87, 0x10, 0x00, 0x00
	.byte	0x73, 0x69, 0x7a, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# StringId (0x128F) {
	#   TypeLeafKind: LF_STRING_ID (0x1605)
	#   Id: 0x0
	#   StringData: std
	# }
	.byte	0x0a, 0x00, 0x05, 0x16
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x73, 0x74, 0x64, 0x00
	# Pointer (0x1290) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::fail_fast (0x1095)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1291) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: gsl::fail_fast& (0x1290)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x90, 0x12, 0x00, 0x00
	# Procedure (0x1292) {
	#   TypeLeafKind: LF_PROCEDURE (0x1008)
	#   ReturnType: gsl::fail_fast&& (0x1096)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&) (0x1291)
	# }
	.byte	0x0e, 0x00, 0x08, 0x10
	.byte	0x96, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x91, 0x12, 0x00, 0x00
	# FuncId (0x1293) {
	#   TypeLeafKind: LF_FUNC_ID (0x1601)
	#   ParentScope: std (0x128F)
	#   FunctionType: gsl::fail_fast&& (gsl::fail_fast&) (0x1292)
	#   Name: forward
	# }
	.byte	0x12, 0x00, 0x01, 0x16
	.byte	0x8f, 0x12, 0x00, 0x00
	.byte	0x92, 0x12, 0x00, 0x00
	.byte	0x66, 0x6f, 0x72, 0x77
	.byte	0x61, 0x72, 0x64, 0x00
	# MemberFunction (0x1294) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1095)
	#   ThisType: gsl::fail_fast* (0x109B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (gsl::fail_fast&&) (0x1097)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x97, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x1295) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1095)
	#   FunctionType: void gsl::fail_fast::(gsl::fail_fast&&) (0x1294)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x94, 0x12, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x1296) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: gsl::fail_fast (0x1095)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x1297) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const gsl::fail_fast (0x1296)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x96, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x1298) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const gsl::fail_fast& (0x1297)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x97, 0x12, 0x00, 0x00
	# MemberFunction (0x1299) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::fail_fast (0x1095)
	#   ThisType: gsl::fail_fast* (0x109B)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const gsl::fail_fast&) (0x1298)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x9b, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x98, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x129A) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::fail_fast (0x1095)
	#   FunctionType: void gsl::fail_fast::(const gsl::fail_fast&) (0x1299)
	#   Name: fail_fast
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x95, 0x10, 0x00, 0x00
	.byte	0x99, 0x12, 0x00, 0x00
	.byte	0x66, 0x61, 0x69, 0x6c
	.byte	0x5f, 0x66, 0x61, 0x73
	.byte	0x74, 0x00, 0xf2, 0xf1
	# Modifier (0x129B) {
	#   TypeLeafKind: LF_MODIFIER (0x1001)
	#   ModifiedType: std::logic_error (0x109A)
	#   Modifiers [ (0x1)
	#     Const (0x1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x10
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x01, 0x00, 0xf2, 0xf1
	# Pointer (0x129C) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: const std::logic_error (0x129B)
	#   PointerAttributes: 0x1002C
	#   PtrType: Near64 (0xC)
	#   PtrMode: LValueReference (0x1)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9b, 0x12, 0x00, 0x00
	.byte	0x2c, 0x00, 0x01, 0x00
	# ArgList (0x129D) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: const std::logic_error& (0x129C)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0x9c, 0x12, 0x00, 0x00
	# MemberFunction (0x129E) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x109A)
	#   ThisType: std::logic_error* (0x10A5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (const std::logic_error&) (0x129D)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0x9d, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x129F) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x109A)
	#   FunctionType: void std::logic_error::(const std::logic_error&) (0x129E)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x9e, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x12A0) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A4)
	#   FunctionType: void std::exception::(const std::exception&) (0x10BD)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xbd, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# Pointer (0x12A1) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: std::logic_error (0x109A)
	#   PointerAttributes: 0x1008C
	#   PtrType: Near64 (0xC)
	#   PtrMode: RValueReference (0x4)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0x8c, 0x00, 0x01, 0x00
	# ArgList (0x12A2) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 1
	#   Arguments [
	#     ArgType: std::logic_error&& (0x12A1)
	#   ]
	# }
	.byte	0x0a, 0x00, 0x01, 0x12
	.byte	0x01, 0x00, 0x00, 0x00
	.byte	0xa1, 0x12, 0x00, 0x00
	# MemberFunction (0x12A3) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x109A)
	#   ThisType: std::logic_error* (0x10A5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 1
	#   ArgListType: (std::logic_error&&) (0x12A2)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x01, 0x00
	.byte	0xa2, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x12A4) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x109A)
	#   FunctionType: void std::logic_error::(std::logic_error&&) (0x12A3)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xa3, 0x12, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x12A5) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A4)
	#   FunctionType: const char* std::exception::() (0x10C2)
	#   Name: what
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xc2, 0x10, 0x00, 0x00
	.byte	0x77, 0x68, 0x61, 0x74
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFunction (0x12A6) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: std::logic_error (0x109A)
	#   ThisType: std::logic_error* (0x10A5)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 0
	#   ArgListType: () (0x1000)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xa5, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	.byte	0x00, 0x10, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x12A7) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x109A)
	#   FunctionType: void std::logic_error::() (0x12A6)
	#   Name: ~logic_error
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xa6, 0x12, 0x00, 0x00
	.byte	0x7e, 0x6c, 0x6f, 0x67
	.byte	0x69, 0x63, 0x5f, 0x65
	.byte	0x72, 0x72, 0x6f, 0x72
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x12A8) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A4)
	#   FunctionType: void std::exception::() (0x10B6)
	#   Name: ~exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xb6, 0x10, 0x00, 0x00
	.byte	0x7e, 0x65, 0x78, 0x63
	.byte	0x65, 0x70, 0x74, 0x69
	.byte	0x6f, 0x6e, 0x00, 0xf1
	# MemberFuncId (0x12A9) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::logic_error (0x109A)
	#   FunctionType: void std::logic_error::(const char*) (0x10AD)
	#   Name: logic_error
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0x9a, 0x10, 0x00, 0x00
	.byte	0xad, 0x10, 0x00, 0x00
	.byte	0x6c, 0x6f, 0x67, 0x69
	.byte	0x63, 0x5f, 0x65, 0x72
	.byte	0x72, 0x6f, 0x72, 0x00
	# MemberFuncId (0x12AA) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: std::exception (0x10A4)
	#   FunctionType: void std::exception::(const char* const) (0x10B7)
	#   Name: exception
	# }
	.byte	0x16, 0x00, 0x02, 0x16
	.byte	0xa4, 0x10, 0x00, 0x00
	.byte	0xb7, 0x10, 0x00, 0x00
	.byte	0x65, 0x78, 0x63, 0x65
	.byte	0x70, 0x74, 0x69, 0x6f
	.byte	0x6e, 0x00, 0xf2, 0xf1
	# MemberFuncId (0x12AB) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1005)
	#   FunctionType: int* gsl::span<int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x103B)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x05, 0x10, 0x00, 0x00
	.byte	0x3b, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# Pointer (0x12AC) {
	#   TypeLeafKind: LF_POINTER (0x1002)
	#   PointeeType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   PointerAttributes: 0x1000C
	#   PtrType: Near64 (0xC)
	#   PtrMode: Pointer (0x0)
	#   IsFlat: 0
	#   IsConst: 0
	#   IsVolatile: 0
	#   IsUnaligned: 0
	#   IsRestrict: 0
	#   SizeOf: 8
	# }
	.byte	0x0a, 0x00, 0x02, 0x10
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x0c, 0x00, 0x01, 0x00
	# ArgList (0x12AD) {
	#   TypeLeafKind: LF_ARGLIST (0x1201)
	#   NumArgs: 2
	#   Arguments [
	#     ArgType: const int* (0x104B)
	#     ArgType: gsl::details::extent_type<0> (0x1080)
	#   ]
	# }
	.byte	0x0e, 0x00, 0x01, 0x12
	.byte	0x02, 0x00, 0x00, 0x00
	.byte	0x4b, 0x10, 0x00, 0x00
	.byte	0x80, 0x10, 0x00, 0x00
	# MemberFunction (0x12AE) {
	#   TypeLeafKind: LF_MFUNCTION (0x1009)
	#   ReturnType: void (0x3)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   ThisType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >* (0x12AC)
	#   CallingConvention: NearC (0x0)
	#   FunctionOptions [ (0x0)
	#   ]
	#   NumParameters: 2
	#   ArgListType: (const int*, gsl::details::extent_type<0>) (0x12AD)
	#   ThisAdjustment: 0
	# }
	.byte	0x1a, 0x00, 0x09, 0x10
	.byte	0x03, 0x00, 0x00, 0x00
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0xac, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x02, 0x00
	.byte	0xad, 0x12, 0x00, 0x00
	.byte	0x00, 0x00, 0x00, 0x00
	# MemberFuncId (0x12AF) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   FunctionType: void gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::(const int*, gsl::details::extent_type<0>) (0x12AE)
	#   Name: storage_type
	# }
	.byte	0x1a, 0x00, 0x02, 0x16
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0xae, 0x12, 0x00, 0x00
	.byte	0x73, 0x74, 0x6f, 0x72
	.byte	0x61, 0x67, 0x65, 0x5f
	.byte	0x74, 0x79, 0x70, 0x65
	.byte	0x00, 0xf3, 0xf2, 0xf1
	# MemberFuncId (0x12B0) {
	#   TypeLeafKind: LF_MFUNC_ID (0x1602)
	#   ClassType: gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> > (0x1048)
	#   FunctionType: const int* gsl::span<const int,-1>::storage_type<gsl::details::extent_type<dynamic_extent> >::() (0x1076)
	#   Name: data
	# }
	.byte	0x12, 0x00, 0x02, 0x16
	.byte	0x48, 0x10, 0x00, 0x00
	.byte	0x76, 0x10, 0x00, 0x00
	.byte	0x64, 0x61, 0x74, 0x61
	.byte	0x00, 0xf3, 0xf2, 0xf1

	.globl	"??_7fail_fast@gsl@@6B@"
.set "??_7fail_fast@gsl@@6B@", .L__unnamed_1+8
	.globl	"??_7logic_error@std@@6B@"
.set "??_7logic_error@std@@6B@", .L__unnamed_2+8
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", .L__unnamed_3+8
